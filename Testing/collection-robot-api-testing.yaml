type: collection.insomnia.rest/5.0
name: Robot API Testing
meta:
  id: wrk_459aa21f87894ece80c960adc98c6582
  created: 1749044569056
  modified: 1749044569056
  description: ""
collection:
  - name: moon-robot
    meta:
      id: fld_4cbe9c9b1c624d66870d923a44ae7a86
      created: 1749044569060
      modified: 1749185768970
      sortKey: -1744887354011
      description: ""
    children:
      - name: robot-command
        meta:
          id: fld_f1389a15ac1a476980cb35a5489435e8
          created: 1749044569060
          modified: 1749185751083
          sortKey: -1745644221681
          description: ""
        children:
          - url: http://{{_['api-host']}}:{{_['port']}}/api/robot-commands
            name: Get All - OK (200)
            meta:
              id: req_672c0d16cf6e4f819d8900dbad9925d9
              created: 1749044569061
              modified: 1749181694535
              isPrivate: false
              description: ""
              sortKey: -1745644224336
            method: GET
            scripts:
              preRequest: // no auth
              afterResponse: >-
                // TEST: success 200

                insomnia.test('Check if status is 200', () => {
                    insomnia.expect(insomnia.response.code).to.eql(200);
                });


                const body = insomnia.response.json();


                // TEST: if commands are returned

                insomnia.test('Check if returned objects have correct keys', ()
                => {
                	body.forEach(command => {
                		insomnia.expect(command).to.be.an('object').that.has.all.keys('id','name','description','isMoveCommand','createdDate','modifiedDate');
                	});
                });


                // get the parent-folder

                const robotCommandFolder =
                insomnia.parentFolders.get('robot-command');

                if (robotCommandFolder === undefined) {
                	throw Error('robotCommandFolder not found');
                }


                // create a robotCommand object from environment variables

                const robotCommand = {
                	name: robotCommandFolder.environment.get("robot_command_name"),
                	isMoveCommand: robotCommandFolder.environment.get("robot_command_is_move_command") == "True",
                	description: robotCommandFolder.environment.get("robot_command_description"),
                	id: robotCommandFolder.environment.get("robot_command_id"),
                	createdDate: robotCommandFolder.environment.get("robot_command_created_date"),
                	modifiedDate: robotCommandFolder.environment.get("robot_command_modified_date"),
                };


                // TEST: if response includes the created command

                insomnia.test('Check if returned objects include the created
                command', () => {
                	var found = false;
                	body.forEach(command => {
                		if(command.id == robotCommand.id) {
                			found = true;
                			insomnia.expect(command.name).to.eql(robotCommand.name);
                			insomnia.expect(command.isMoveCommand).to.eql(robotCommand.isMoveCommand);
                			insomnia.expect(command.description).to.eql(robotCommand.description);
                			insomnia.expect(command.createdDate).to.eql(robotCommand.createdDate);
                			insomnia.expect(command.modifiedDate).to.eql(robotCommand.modifiedDate);
                		}
                	})
                	insomnia.expect(found).to.eql(true);
                })
            settings:
              renderRequestBody: true
              encodeUrl: true
              followRedirects: global
              cookies:
                send: true
                store: true
              rebuildPath: true
          - url: http://{{_['api-host']}}:{{_['port']}}/api/robot-commands/move
            name: Get All Move - OK (200)
            meta:
              id: req_de5d76f4fb3441428643dce06ec9ff6a
              created: 1749044569061
              modified: 1749181728736
              isPrivate: false
              description: ""
              sortKey: -1745644223811
            method: GET
            scripts:
              preRequest: // no auth
              afterResponse: >-
                // TEST: success 200

                insomnia.test('Check if status is 200', () => {
                    insomnia.expect(insomnia.response.code).to.eql(200);
                });


                const body = insomnia.response.json();


                // TEST: if commands are returned

                insomnia.test('Check if returned objects have correct keys', ()
                => {
                	body.forEach(command => {
                		insomnia.expect(command).to.be.an('object').that.has.all.keys('id','name','description','isMoveCommand','createdDate','modifiedDate');
                	});
                });


                // get the parent-folder

                const robotCommandFolder =
                insomnia.parentFolders.get('robot-command');

                if (robotCommandFolder === undefined) {
                	throw Error('robotCommandFolder not found');
                }


                // create a robotCommand object from environment variables

                const robotCommand = {
                	name: robotCommandFolder.environment.get("robot_command_name"),
                	isMoveCommand: robotCommandFolder.environment.get("robot_command_is_move_command") == "True",
                	description: robotCommandFolder.environment.get("robot_command_description"),
                	id: robotCommandFolder.environment.get("robot_command_id"),
                	createdDate: robotCommandFolder.environment.get("robot_command_created_date"),
                	modifiedDate: robotCommandFolder.environment.get("robot_command_modified_date"),
                };


                // TEST: if response includes the created command

                insomnia.test('Check if returned objects include the created
                command', () => {
                	var found = false;
                	body.forEach(command => {
                		if(command.id == robotCommand.id) {
                			found = true;
                			insomnia.expect(command.name).to.eql(robotCommand.name);
                			insomnia.expect(command.isMoveCommand).to.eql(robotCommand.isMoveCommand);
                			insomnia.expect(command.description).to.eql(robotCommand.description);
                			insomnia.expect(command.createdDate).to.eql(robotCommand.createdDate);
                			insomnia.expect(command.modifiedDate).to.eql(robotCommand.modifiedDate);
                		}
                	})
                	insomnia.expect(found).to.eql(true);
                })
            settings:
              renderRequestBody: true
              encodeUrl: true
              followRedirects: global
              cookies:
                send: true
                store: true
              rebuildPath: true
          - url: http://{{_['api-host']}}:{{_['port']}}/api/robot-commands/{{
              _.robot_command_id }}
            name: Get By Id - OK (200)
            meta:
              id: req_691921d6a3b54cdb8e2bbf113b82fcd1
              created: 1749044569062
              modified: 1749181702786
              isPrivate: false
              description: ""
              sortKey: -1745644224136
            method: GET
            scripts:
              preRequest: // no auth
              afterResponse: >-
                // TEST: success 200

                insomnia.test('Check if status is 200', () => {
                    insomnia.expect(insomnia.response.code).to.eql(200);
                });


                const body = insomnia.response.json();


                // TEST: if command is returned

                insomnia.test('Check if returned object has correct keys', () =>
                {
                		insomnia.expect(body).to.be.an('object').that.has.all.keys('id','name','description','isMoveCommand','createdDate','modifiedDate');
                });


                // get the parent-folder and set robot-command values as
                environment variables

                const robotCommandFolder =
                insomnia.parentFolders.get('robot-command');

                if (robotCommandFolder === undefined) {
                		throw Error('robotCommandFolder not found');
                }


                // create a robotCommand object from environment variables

                const robotCommand = {
                		name: robotCommandFolder.environment.get("robot_command_name"),
                		isMoveCommand: robotCommandFolder.environment.get("robot_command_is_move_command") == "True",
                		description: robotCommandFolder.environment.get("robot_command_description"),
                		id: robotCommandFolder.environment.get("robot_command_id"),
                		createdDate: robotCommandFolder.environment.get("robot_command_created_date"),
                		modifiedDate: robotCommandFolder.environment.get("robot_command_modified_date"),
                };


                // TEST: if response includes the created command

                insomnia.test('Check if the returned object is the created
                command', () => {
                		insomnia.expect(body.name).to.eql(robotCommand.name);
                		insomnia.expect(body.isMoveCommand).to.eql(robotCommand.isMoveCommand);
                		insomnia.expect(body.description).to.eql(robotCommand.description);
                		insomnia.expect(body.createdDate).to.eql(robotCommand.createdDate);
                		insomnia.expect(body.modifiedDate).to.eql(robotCommand.modifiedDate);
                		insomnia.expect(body.id).to.eql(robotCommand.id);
                })
            settings:
              renderRequestBody: true
              encodeUrl: true
              followRedirects: global
              cookies:
                send: true
                store: true
              rebuildPath: true
          - url: http://{{_['api-host']}}:{{_['port']}}/api/robot-commands/{{
              _.robot_command_id }}
            name: Update - OK (200)
            meta:
              id: req_dba19fba7df34e8dbaf6afbc9e262262
              created: 1749044569062
              modified: 1749181707143
              isPrivate: false
              description: ""
              sortKey: -1745644223936
            method: PUT
            parameters:
              - id: pair_c0288d514e27477b9c84abe9dcebd85d
                name: ""
                value: ""
                description: ""
                disabled: false
            scripts:
              preRequest: >-
                // get admin credentials

                const adminEmail = insomnia.environment.get("admin_email");

                const adminPassword =
                insomnia.environment.get("admin_password");


                // update authorization header

                insomnia.request.auth.update(
                		{
                				type: 'basic',
                				basic: [
                						{key: 'username', value: adminEmail},
                						{key: 'password', value: adminPassword},
                				],
                		},
                		'basic'
                )


                // get the parent-folder and set robot-command values as
                environment variables

                const robotCommandFolder =
                insomnia.parentFolders.get('robot-command');

                if (robotCommandFolder === undefined) {
                	throw Error('robotCommandFolder not found');
                }


                // update the name and desc variables

                const timestamp = Date.now();

                robotCommandFolder.environment.set('robot_command_name',
                `TEST_NAME_${timestamp}_UPDATE`);

                robotCommandFolder.environment.set('robot_command_description',
                `TEST_DESC_${timestamp}_UPDATE`);


                // create the new robotCommand as an object

                const robotCommand = {
                	"name": robotCommandFolder.environment.get("robot_command_name"),
                	"isMoveCommand": robotCommandFolder.environment.get("robot_command_is_move_command") == "True",
                	"description": robotCommandFolder.environment.get("robot_command_description"),
                };


                // add the robotCommand to the body as JSON and set header

                insomnia.request.addHeader({key: 'Content-Type', value:
                'application/json' });

                insomnia.request.body.update({
                  mode: 'raw',
                  raw: JSON.stringify(robotCommand),
                });
              afterResponse: >-
                // get the parent-folder and set robot-command values as
                environment variables

                const robotCommandFolder =
                insomnia.parentFolders.get('robot-command');

                if (robotCommandFolder === undefined) {
                	throw Error('robotCommandFolder not found');
                }


                // create a robotCommand object from environment variables

                const robotCommand = {
                		name: robotCommandFolder.environment.get("robot_command_name"),
                		isMoveCommand: robotCommandFolder.environment.get("robot_command_is_move_command") == "True",
                		description: robotCommandFolder.environment.get("robot_command_description"),
                		id: robotCommandFolder.environment.get("robot_command_id"),
                		createdDate: robotCommandFolder.environment.get("robot_command_created_date"),
                		modifiedDate: robotCommandFolder.environment.get("robot_command_modified_date"),
                };


                // TEST: 200 status

                insomnia.test('Check if status is 200', () => {
                    insomnia.expect(insomnia.response.code).to.eql(200);
                });


                if(insomnia.response.code == 200){
                		const body = insomnia.response.json();

                		// TEST: check if the returned object is a valid robotCommand
                		insomnia.test('Check if returned object has correct keys and is a valid robotCommand', () => {  
                				insomnia.expect(body).to.be.an('object').that.has.all.keys('id','name','description','isMoveCommand','createdDate','modifiedDate');
                		});
                	
                		// TEST: check if the modified date has changed, and created date has remained the same
                		insomnia.test("Check if the command's modified date has changed and created date has remained the same", () => {
                				insomnia.expect(body.createdDate).to.eql(robotCommand.createdDate);
                				insomnia.expect(body.modifiedDate != robotCommand.modifiedDate);
                				insomnia.expect(body.modifiedDate != body.createdDate);
                		});

                		// TEST: check if the returned object has the correct values
                		insomnia.test('Check if returned robotCommand has the correct values', () => {
                				insomnia.expect(body.name).to.eql(robotCommand.name);
                				insomnia.expect(body.description).to.eql(robotCommand.description);
                				insomnia.expect(body.id).to.eql(robotCommand.id);
                		})
                	
                		// not a test - set environment variables
                		robotCommandFolder.environment.set('robot_command_modified_date', body.modifiedDate);
                }
            settings:
              renderRequestBody: true
              encodeUrl: true
              followRedirects: global
              cookies:
                send: true
                store: true
              rebuildPath: true
          - url: http://{{_['api-host']}}:{{_['port']}}/api/robot-commands
            name: Create - Created (201)
            meta:
              id: req_eeb45cf1c25c4fce9725d532a348d71a
              created: 1749044569062
              modified: 1749180823281
              isPrivate: false
              description: ""
              sortKey: -1745644224436
            method: POST
            scripts:
              preRequest: |-
                // get admin credentials
                const adminEmail = insomnia.environment.get("admin_email");
                const adminPassword = insomnia.environment.get("admin_password");

                // update authorization header
                insomnia.request.auth.update(
                		{
                				type: 'basic',
                				basic: [
                						{key: 'username', value: adminEmail},
                						{key: 'password', value: adminPassword},
                				],
                		},
                		'basic'
                )

                // get the parent-folder and set robot-command values as environment variables
                const robotCommandFolder = insomnia.parentFolders.get('robot-command');
                if (robotCommandFolder === undefined) {
                	throw Error('robotCommandFolder not found');
                }

                // create the new command with test values
                const timestamp = Date.now();
                robotCommandFolder.environment.set('robot_command_name', `TEST_NAME_${timestamp}`);
                robotCommandFolder.environment.set('robot_command_is_move_command', "False");
                robotCommandFolder.environment.set('robot_command_description', `TEST_DESC_${timestamp}`);

                // create the new robotCommand as an object
                const robotCommand = {
                	"name": robotCommandFolder.environment.get("robot_command_name"),
                	"isMoveCommand": robotCommandFolder.environment.get("robot_command_is_move_command") == "True",
                	"description": robotCommandFolder.environment.get("robot_command_description"),
                };

                // add the robotCommand to the body as JSON and set header
                insomnia.request.addHeader({key: 'Content-Type', value: 'application/json' });
                insomnia.request.body.update({
                  mode: 'raw',
                  raw: JSON.stringify(robotCommand),
                });
              afterResponse: >-
                // get the parent-folder and set robot-command values as
                environment variables

                const robotCommandFolder =
                insomnia.parentFolders.get('robot-command');

                if (robotCommandFolder === undefined) {
                	throw Error('robotCommandFolder not found');
                }


                // create a robotCommand object from environment variables

                const robotCommand = {
                	"name": robotCommandFolder.environment.get("robot_command_name"),
                	"isMoveCommand": robotCommandFolder.environment.get("robot_command_is_move_command") == "True",
                	"description": robotCommandFolder.environment.get("robot_command_description"),
                };


                // TEST: created 201

                insomnia.test('Check if status is 201', () => {
                    insomnia.expect(insomnia.response.code).to.eql(201);
                });


                if(insomnia.response.code == 201){
                	const body = insomnia.response.json();

                	// TEST: check if the returned object is a valid robotCommand
                	insomnia.test('Check if returned object has correct keys and is a valid robotCommand', () => {  
                		insomnia.expect(body).to.be.an('object').that.has.all.keys('id','name','description','isMoveCommand','createdDate','modifiedDate');
                	});

                	// not a test - set environment variables
                	robotCommandFolder.environment.set('robot_command_id', body.id);
                	robotCommandFolder.environment.set('robot_command_created_date', body.createdDate);
                	robotCommandFolder.environment.set('robot_command_modified_date', body.modifiedDate);

                	// TEST: check if the returned object has the correct values
                	insomnia.test('Check if returned robotCommand has the correct values', () => {
                		insomnia.expect(body.name).to.eql(robotCommand.name);
                		insomnia.expect(body.isMoveCommand).to.eql(robotCommand.isMoveCommand);
                		insomnia.expect(body.description).to.eql(robotCommand.description);
                	})
                }
            settings:
              renderRequestBody: true
              encodeUrl: true
              followRedirects: global
              cookies:
                send: true
                store: true
              rebuildPath: true
          - url: http://{{_['api-host']}}:{{_['port']}}/api/robot-commands/{{
              _.robot_command_id }}
            name: Modify - OK (200)
            meta:
              id: req_a2ab2989675f4acb8b046f082c02a3ad
              created: 1749044569063
              modified: 1749181718533
              isPrivate: false
              description: ""
              sortKey: -1745644223836
            method: PATCH
            headers:
              - name: User-Agent
                value: insomnia/11.0.2
            scripts:
              preRequest: |-
                // get admin credentials
                const adminEmail = insomnia.environment.get("admin_email");
                const adminPassword = insomnia.environment.get("admin_password");

                // update authorization header
                insomnia.request.auth.update(
                		{
                				type: 'basic',
                				basic: [
                						{key: 'username', value: adminEmail},
                						{key: 'password', value: adminPassword},
                				],
                		},
                		'basic'
                )

                // get the parent-folder and set robot-command values as environment variables
                const robotCommandFolder = insomnia.parentFolders.get('robot-command');
                if (robotCommandFolder === undefined) {
                		throw Error('robotCommandFolder not found');
                }

                // update the variable
                robotCommandFolder.environment.set('robot_command_is_move_command', "True");

                // create the new robotCommand as an object
                const body = {
                		"isMoveCommand": robotCommandFolder.environment.get("robot_command_is_move_command") == "True",
                };

                // add the robotCommand to the body as JSON and set header
                insomnia.request.addHeader({key: 'Content-Type', value: 'application/json' });
                insomnia.request.body.update({
                		mode: 'raw',
                		raw: JSON.stringify(body),
                });
              afterResponse: >-
                // get the parent-folder and set robot-command values as
                environment variables

                const robotCommandFolder =
                insomnia.parentFolders.get('robot-command');

                if (robotCommandFolder === undefined) {
                		throw Error('robotCommandFolder not found');
                }


                // create a robotCommand object from environment variables

                const robotCommand = {
                		name: robotCommandFolder.environment.get("robot_command_name"),
                		isMoveCommand: robotCommandFolder.environment.get("robot_command_is_move_command") == "True",
                		description: robotCommandFolder.environment.get("robot_command_description"),
                		id: robotCommandFolder.environment.get("robot_command_id"),
                		createdDate: robotCommandFolder.environment.get("robot_command_created_date"),
                		modifiedDate: robotCommandFolder.environment.get("robot_command_modified_date"),
                };


                // TEST: 200 status

                insomnia.test('Check if status is 200', () => {
                    insomnia.expect(insomnia.response.code).to.eql(200);
                });


                if(insomnia.response.code == 200){
                		const body = insomnia.response.json();

                		// TEST: check if the returned object is a valid robotCommand
                		insomnia.test('Check if returned object has correct keys and is a valid robotCommand', () => {  
                				insomnia.expect(body).to.be.an('object').that.has.all.keys('id','name','description','isMoveCommand','createdDate','modifiedDate');
                		});
                	
                		// TEST: check if the modified date has changed, and created date has remained the same
                		insomnia.test("Check if the command's modified date has changed and created date has remained the same", () => {
                				insomnia.expect(body.createdDate).to.eql(robotCommand.createdDate);
                				insomnia.expect(body.modifiedDate != robotCommand.modifiedDate);
                				insomnia.expect(body.modifiedDate != body.createdDate);
                		});

                		// TEST: check if the returned object has the correct values
                		insomnia.test('Check if returned robotCommand has the correct values', () => {
                				insomnia.expect(body.isMoveCommand).to.eql(robotCommand.isMoveCommand);
                		})
                	
                		// not a test - set environment variables
                		robotCommandFolder.environment.set('robot_command_modified_date', body.modifiedDate);
                }
            settings:
              renderRequestBody: true
              encodeUrl: true
              followRedirects: global
              cookies:
                send: true
                store: true
              rebuildPath: true
          - url: http://{{_['api-host']}}:{{_['port']}}/api/robot-commands/{{
              _.robot_command_id }}
            name: Delete - No Content (204)
            meta:
              id: req_ed2095b34f8f41ee8e2455074b3c478d
              created: 1749044569063
              modified: 1749185324801
              isPrivate: false
              description: ""
              sortKey: -1745644223548.5
            method: DELETE
            scripts:
              preRequest: >-
                // get admin credentials

                const adminEmail = insomnia.environment.get("admin_email");

                const adminPassword =
                insomnia.environment.get("admin_password");


                // update authorization header

                insomnia.request.auth.update(
                		{
                				type: 'basic',
                				basic: [
                						{key: 'username', value: adminEmail},
                						{key: 'password', value: adminPassword},
                				],
                		},
                		'basic'
                )
              afterResponse: |-
                insomnia.test('Check if status is 204', () => {
                    insomnia.expect(insomnia.response.code).to.eql(204);
                });
            settings:
              renderRequestBody: true
              encodeUrl: true
              followRedirects: global
              cookies:
                send: true
                store: true
              rebuildPath: true
          - url: http://{{_['api-host']}}:{{_['port']}}/api/robot-commands/0
            name: Get By Id - Not Found (404)
            meta:
              id: req_7a325ea2b3a641bea785b2b0738afb58
              created: 1749086081971
              modified: 1749175191870
              isPrivate: false
              description: ""
              sortKey: -1745644224086
            method: GET
            scripts:
              preRequest: // no auth
              afterResponse: |+
                insomnia.test('Check if status is 404', () => {
                    insomnia.expect(insomnia.response.code).to.eql(404);
                });

            settings:
              renderRequestBody: true
              encodeUrl: true
              followRedirects: global
              cookies:
                send: true
                store: true
              rebuildPath: true
          - url: http://{{_['api-host']}}:{{_['port']}}/api/robot-commands
            name: Create - Bad Request (400)
            meta:
              id: req_139a0e181fdd45adbf5c8ab3b8b63bba
              created: 1749086137491
              modified: 1749171534289
              isPrivate: false
              description: ""
              sortKey: -1745644224386
            method: POST
            scripts:
              preRequest: >+
                // set body to empty string

                insomnia.request.addHeader({key: 'Content-Type', value:
                'application/json' });

                insomnia.request.body.update({
                  mode: 'raw',
                  raw: "",
                });


                // get admin credentials

                const adminEmail = insomnia.environment.get("admin_email");

                const adminPassword =
                insomnia.environment.get("admin_password");


                // update authorization header

                insomnia.request.auth.update(
                		{
                				type: 'basic',
                				basic: [
                						{key: 'username', value: adminEmail},
                						{key: 'password', value: adminPassword},
                				],
                		},
                		'basic'
                )




              afterResponse: |+
                // 400
                insomnia.test('Check if status is 400', () => {
                    insomnia.expect(insomnia.response.code).to.eql(400);
                });




            settings:
              renderRequestBody: true
              encodeUrl: true
              followRedirects: global
              cookies:
                send: true
                store: true
              rebuildPath: true
          - url: http://{{_['api-host']}}:{{_['port']}}/api/robot-commands
            name: Create - Conflict (409)
            meta:
              id: req_fc5ebca5351d423b857033e6c648be85
              created: 1749086159121
              modified: 1749173165761
              isPrivate: false
              description: ""
              sortKey: -1745644224342.25
            method: POST
            scripts:
              preRequest: >
                const robotCommandFolder =
                insomnia.parentFolders.get('robot-command');

                if (robotCommandFolder === undefined) {
                	throw Error('robotCommandFolder not found');
                }


                // create the new robotCommand as an object with the same name
                as the previously created command

                const robotCommand = {
                	"name": robotCommandFolder.environment.get("robot_command_name"),
                	"isMoveCommand": robotCommandFolder.environment.get("robot_command_is_move_command") == "True",
                	"description": robotCommandFolder.environment.get("robot_command_description"),
                };


                insomnia.request.addHeader({key: 'Content-Type', value:
                'application/json' });

                insomnia.request.body.update({
                  mode: 'raw',
                  raw: JSON.stringify(robotCommand),
                });


                // login as admin

                // get admin credentials

                const adminEmail = insomnia.environment.get("admin_email");

                const adminPassword =
                insomnia.environment.get("admin_password");


                // update authorization header

                insomnia.request.auth.update(
                		{
                				type: 'basic',
                				basic: [
                						{key: 'username', value: adminEmail},
                						{key: 'password', value: adminPassword},
                				],
                		},
                		'basic'
                )
              afterResponse: >-
                // 409

                insomnia.test('Check if status is 409', () => {
                    insomnia.expect(insomnia.response.code).to.eql(409);
                });


                const robotCommandFolder =
                insomnia.parentFolders.get('robot-command');

                if (robotCommandFolder === undefined) {
                	throw Error('robotCommandFolder not found');
                }

                const robotCommandName =
                robotCommandFolder.environment.get("robot_command_name")

                const body = insomnia.response.json();


                insomnia.test('Check if the error message specifies the correct
                name', () => {  
                		insomnia.expect(body).to.be.an('object').that.has.all.keys('message');
                		insomnia.expect(body.message).to.include(robotCommandName);
                });
            settings:
              renderRequestBody: true
              encodeUrl: true
              followRedirects: global
              cookies:
                send: true
                store: true
              rebuildPath: true
          - url: http://{{_['api-host']}}:{{_['port']}}/api/robot-commands/{{
              _.robot_command_id }}
            name: Update - Bad Request (400)
            meta:
              id: req_0e82738b6dda4870b4bb6213ffa3f8db
              created: 1749086205609
              modified: 1749120056144
              isPrivate: false
              description: ""
              sortKey: -1745644223886
            method: PUT
            parameters:
              - id: pair_c0288d514e27477b9c84abe9dcebd85d
                name: ""
                value: ""
                description: ""
                disabled: false
            scripts:
              preRequest: >-
                // set body to empty string

                insomnia.request.addHeader({key: 'Content-Type', value:
                'application/json' });

                insomnia.request.body.update({
                  mode: 'raw',
                  raw: "",
                });


                // get admin credentials

                const adminEmail = insomnia.environment.get("admin_email");

                const adminPassword =
                insomnia.environment.get("admin_password");


                // update authorization header

                insomnia.request.auth.update(
                		{
                				type: 'basic',
                				basic: [
                						{key: 'username', value: adminEmail},
                						{key: 'password', value: adminPassword},
                				],
                		},
                		'basic'
                )
              afterResponse: |-
                // 400
                insomnia.test('Check if status is 400', () => {
                    insomnia.expect(insomnia.response.code).to.eql(400);
                });
            settings:
              renderRequestBody: true
              encodeUrl: true
              followRedirects: global
              cookies:
                send: true
                store: true
              rebuildPath: true
          - url: http://{{_['api-host']}}:{{_['port']}}/api/robot-commands/0
            name: Update - Not Found (404)
            meta:
              id: req_af5ea06607714eba9bf1601d3ff717e1
              created: 1749086221721
              modified: 1749170850656
              isPrivate: false
              description: ""
              sortKey: -1745644223861
            method: PUT
            parameters:
              - id: pair_c0288d514e27477b9c84abe9dcebd85d
                name: ""
                value: ""
                description: ""
                disabled: false
            scripts:
              preRequest: >-
                // get admin credentials

                const adminEmail = insomnia.environment.get("admin_email");

                const adminPassword =
                insomnia.environment.get("admin_password");


                // update authorization header

                insomnia.request.auth.update(
                		{
                				type: 'basic',
                				basic: [
                						{key: 'username', value: adminEmail},
                						{key: 'password', value: adminPassword},
                				],
                		},
                		'basic'
                )


                // get the parent-folder and set robot-command values as
                environment variables

                const robotCommandFolder =
                insomnia.parentFolders.get('robot-command');

                if (robotCommandFolder === undefined) {
                	throw Error('robotCommandFolder not found');
                }


                // create a random robotCommand

                const timestamp = Date.now();

                const robotCommand = {
                	"name": `TEST_NAME_${timestamp}`,
                	"isMoveCommand": false,
                	"description": `TEST_DESC_${timestamp}`
                };


                // add the robotCommand to the body as JSON and set header

                insomnia.request.addHeader({key: 'Content-Type', value:
                'application/json' });

                insomnia.request.body.update({
                  mode: 'raw',
                  raw: JSON.stringify(robotCommand),
                });
              afterResponse: |+
                insomnia.test('Check if status is 404', () => {
                    insomnia.expect(insomnia.response.code).to.eql(404);
                });

            settings:
              renderRequestBody: true
              encodeUrl: true
              followRedirects: global
              cookies:
                send: true
                store: true
              rebuildPath: true
          - url: http://{{_['api-host']}}:{{_['port']}}/api/robot-commands/{{
              _.robot_command_id }}
            name: Update - Conflict (409)
            meta:
              id: req_6ce1f74771ac4c1080308a08fe65dc95
              created: 1749086233173
              modified: 1749124980761
              isPrivate: false
              description: ""
              sortKey: -1745644223848.5
            method: PUT
            parameters:
              - id: pair_c0288d514e27477b9c84abe9dcebd85d
                name: ""
                value: ""
                description: ""
                disabled: false
            scripts:
              preRequest: >-
                // get admin credentials

                const adminEmail = insomnia.environment.get("admin_email");

                const adminPassword =
                insomnia.environment.get("admin_password");


                // update authorization header

                insomnia.request.auth.update(
                		{
                				type: 'basic',
                				basic: [
                						{key: 'username', value: adminEmail},
                						{key: 'password', value: adminPassword},
                				],
                		},
                		'basic'
                )


                // get the parent-folder and set robot-command values as
                environment variables

                const robotCommandFolder =
                insomnia.parentFolders.get('robot-command');

                if (robotCommandFolder === undefined) {
                	throw Error('robotCommandFolder not found');
                }


                // create a robotCommand as an object from the variables

                // with the same name as the secondary command

                const robotCommand = {
                	"name": robotCommandFolder.environment.get("robot_command_name_secondary"),
                	"isMoveCommand": robotCommandFolder.environment.get("robot_command_is_move_command") == "True",
                	"description": robotCommandFolder.environment.get("robot_command_description"),
                };


                // add the robotCommand to the body as JSON and set header

                insomnia.request.addHeader({key: 'Content-Type', value:
                'application/json' });

                insomnia.request.body.update({
                  mode: 'raw',
                  raw: JSON.stringify(robotCommand),
                });
              afterResponse: |+
                // 409
                insomnia.test('Check if status is 409', () => {
                    insomnia.expect(insomnia.response.code).to.eql(409);
                });

                const robotCommandFolder = insomnia.parentFolders.get('robot-command');
                if (robotCommandFolder === undefined) {
                	throw Error('robotCommandFolder not found');
                }
                const robotCommandNameSecondary = robotCommandFolder.environment.get("robot_command_name_secondary")
                const body = insomnia.response.json();

                insomnia.test('Check if the error message specifies the correct name', () => {  
                		insomnia.expect(body).to.be.an('object').that.has.all.keys('message');
                		
                		insomnia.expect(body.message).to.include(robotCommandNameSecondary);


                });





            settings:
              renderRequestBody: true
              encodeUrl: true
              followRedirects: global
              cookies:
                send: true
                store: true
              rebuildPath: true
          - url: http://{{_['api-host']}}:{{_['port']}}/api/robot-commands/0
            name: Delete - Not Found (404)
            meta:
              id: req_7fddca4d45264596ba613beaf38095eb
              created: 1749086283639
              modified: 1749185408085
              isPrivate: false
              description: ""
              sortKey: -1745644223648.5
            method: DELETE
            scripts:
              preRequest: >-
                // send id that doesn't exist


                // get admin credentials

                const adminEmail = insomnia.environment.get("admin_email");

                const adminPassword =
                insomnia.environment.get("admin_password");


                // update authorization header

                insomnia.request.auth.update(
                		{
                				type: 'basic',
                				basic: [
                						{key: 'username', value: adminEmail},
                						{key: 'password', value: adminPassword},
                				],
                		},
                		'basic'
                )
              afterResponse: |-
                insomnia.test('Check if status is 404', () => {
                    insomnia.expect(insomnia.response.code).to.eql(404);
                });
            settings:
              renderRequestBody: true
              encodeUrl: true
              followRedirects: global
              cookies:
                send: true
                store: true
              rebuildPath: true
          - url: http://{{_['api-host']}}:{{_['port']}}/api/robot-commands/{{
              _.robot_command_id }}
            name: Modify - Bad Request (400)
            meta:
              id: req_1ff21476058f4d2bbc441a025c173a65
              created: 1749090984362
              modified: 1749181058645
              isPrivate: false
              description: ""
              sortKey: -1745644223786
            method: PATCH
            headers:
              - name: User-Agent
                value: insomnia/11.0.2
            scripts:
              preRequest: >-
                // set body to empty string

                insomnia.request.addHeader({key: 'Content-Type', value:
                'application/json' });

                insomnia.request.body.update({
                  mode: 'raw',
                  raw: "",
                });


                // get admin credentials

                const adminEmail = insomnia.environment.get("admin_email");

                const adminPassword =
                insomnia.environment.get("admin_password");


                // update authorization header

                insomnia.request.auth.update(
                		{
                				type: 'basic',
                				basic: [
                						{key: 'username', value: adminEmail},
                						{key: 'password', value: adminPassword},
                				],
                		},
                		'basic'
                )
              afterResponse: |-
                // 400
                insomnia.test('Check if status is 400', () => {
                    insomnia.expect(insomnia.response.code).to.eql(400);
                });
            settings:
              renderRequestBody: true
              encodeUrl: true
              followRedirects: global
              cookies:
                send: true
                store: true
              rebuildPath: true
          - url: http://{{_['api-host']}}:{{_['port']}}/api/robot-commands/0
            name: Modify - Not Found (404)
            meta:
              id: req_ca390fcf75014950ba2921e7d2907cf8
              created: 1749091000252
              modified: 1749170946158
              isPrivate: false
              description: ""
              sortKey: -1745644223761
            method: PATCH
            headers:
              - name: User-Agent
                value: insomnia/11.0.2
            scripts:
              preRequest: |-
                // get admin credentials
                const adminEmail = insomnia.environment.get("admin_email");
                const adminPassword = insomnia.environment.get("admin_password");

                // update authorization header
                insomnia.request.auth.update(
                		{
                				type: 'basic',
                				basic: [
                						{key: 'username', value: adminEmail},
                						{key: 'password', value: adminPassword},
                				],
                		},
                		'basic'
                )

                // create the new robotCommand as an object
                const body = {
                	"isMoveCommand": true,
                };

                // get the parent-folder and set robot-command values as environment variables
                const robotCommandFolder = insomnia.parentFolders.get('robot-command');
                if (robotCommandFolder === undefined) {
                	throw Error('robotCommandFolder not found');
                }

                // update the variable
                robotCommandFolder.environment.set('robot_command_is_move_command', body.isMoveCommand);

                // add the robotCommand to the body as JSON and set header
                insomnia.request.addHeader({key: 'Content-Type', value: 'application/json' });
                insomnia.request.body.update({
                  mode: 'raw',
                  raw: JSON.stringify(body),
                });
              afterResponse: |+
                insomnia.test('Check if status is 404', () => {
                    insomnia.expect(insomnia.response.code).to.eql(404);
                });

            settings:
              renderRequestBody: true
              encodeUrl: true
              followRedirects: global
              cookies:
                send: true
                store: true
              rebuildPath: true
          - url: http://{{_['api-host']}}:{{_['port']}}/api/robot-commands/{{
              _.robot_command_id }}
            name: Modify - Conflict (409)
            meta:
              id: req_957fde5d5298476ebc86dcad1a1f0684
              created: 1749091014099
              modified: 1749175535095
              isPrivate: false
              description: ""
              sortKey: -1745644223748.5
            method: PATCH
            headers:
              - name: User-Agent
                value: insomnia/11.0.2
            scripts:
              preRequest: >-
                // get admin credentials

                const adminEmail = insomnia.environment.get("admin_email");

                const adminPassword =
                insomnia.environment.get("admin_password");


                // update authorization header

                insomnia.request.auth.update(
                		{
                				type: 'basic',
                				basic: [
                						{key: 'username', value: adminEmail},
                						{key: 'password', value: adminPassword},
                				],
                		},
                		'basic'
                )


                // get the parent-folder and set robot-command values as
                environment variables

                const robotCommandFolder =
                insomnia.parentFolders.get('robot-command');

                if (robotCommandFolder === undefined) {
                	throw Error('robotCommandFolder not found');
                }


                // create a robotCommand as an object from the variables

                // with the same name as the secondary command

                const body = {
                	"name": robotCommandFolder.environment.get("robot_command_name_secondary"),
                };


                // add the robotCommand to the body as JSON and set header

                insomnia.request.addHeader({key: 'Content-Type', value:
                'application/json' });

                insomnia.request.body.update({
                  mode: 'raw',
                  raw: JSON.stringify(body),
                });
              afterResponse: |-
                // 409
                insomnia.test('Check if status is 409', () => {
                    insomnia.expect(insomnia.response.code).to.eql(409);
                });

                const robotCommandFolder = insomnia.parentFolders.get('robot-command');
                if (robotCommandFolder === undefined) {
                	throw Error('robotCommandFolder not found');
                }
                const robotCommandNameSecondary = robotCommandFolder.environment.get("robot_command_name_secondary")
                const body = insomnia.response.json();

                insomnia.test('Check if exception message specifies the correct name', () => {  
                		insomnia.expect(body).to.be.an('object').that.has.all.keys('message');
                		insomnia.expect(body.message).to.include(robotCommandNameSecondary);
                });
            settings:
              renderRequestBody: true
              encodeUrl: true
              followRedirects: global
              cookies:
                send: true
                store: true
              rebuildPath: true
          - url: http://{{_['api-host']}}:{{_['port']}}/api/robot-commands
            name: Create - Forbidden (403)
            meta:
              id: req_1aa7353f31284e06971c5e9853eeacb0
              created: 1749098802618
              modified: 1749171537891
              isPrivate: false
              description: ""
              sortKey: -1745644224348.5
            method: POST
            scripts:
              preRequest: >+
                const robotCommandFolder =
                insomnia.parentFolders.get('robot-command');

                if (robotCommandFolder === undefined) {
                	throw Error('robotCommandFolder not found');
                }


                const robotCommand = {
                	name: robotCommandFolder.environment.get("robot-command-name"),
                	isMoveCommand: robotCommandFolder.environment.get("robot-command-is-move-command") === "true",
                	description: robotCommandFolder.environment.get("robot-command-description"),
                };


                insomnia.request.addHeader({key: 'Content-Type', value:
                'application/json' });

                insomnia.request.body.update({
                  mode: 'raw',
                  raw: JSON.stringify(robotCommand),
                });


                // auth user has user role

                // get user credentials

                const userEmail = insomnia.environment.get("user_email");

                const userPassword = insomnia.environment.get("user_password");


                // update authorization header

                insomnia.request.auth.update(
                		{
                				type: 'basic',
                				basic: [
                						{key: 'username', value: userEmail},
                						{key: 'password', value: userPassword},
                				],
                		},
                		'basic'
                )


              afterResponse: |+
                // 403
                insomnia.test('Check if status is 403', () => {
                    insomnia.expect(insomnia.response.code).to.eql(403);
                });




            settings:
              renderRequestBody: true
              encodeUrl: true
              followRedirects: global
              cookies:
                send: true
                store: true
              rebuildPath: true
          - url: http://{{_['api-host']}}:{{_['port']}}/api/robot-commands
            name: Create - Unauthorized (401)
            meta:
              id: req_d28bd12a9c65467891dfd7fc432a9894
              created: 1749098829236
              modified: 1749171536136
              isPrivate: false
              description: ""
              sortKey: -1745644224361
            method: POST
            scripts:
              preRequest: >+
                const robotCommandFolder =
                insomnia.parentFolders.get('robot-command');

                if (robotCommandFolder === undefined) {
                	throw Error('robotCommandFolder not found');
                }


                const robotCommand = {
                	name: robotCommandFolder.environment.get("robot-command-name"),
                	isMoveCommand: robotCommandFolder.environment.get("robot-command-is-move-command") === "true",
                	description: robotCommandFolder.environment.get("robot-command-description"),
                };


                insomnia.request.addHeader({key: 'Content-Type', value:
                'application/json' });

                insomnia.request.body.update({
                  mode: 'raw',
                  raw: JSON.stringify(robotCommand),
                });


                // no auth is provided



              afterResponse: |+
                // 401
                insomnia.test('Check if status is 401', () => {
                    insomnia.expect(insomnia.response.code).to.eql(401);
                });




            settings:
              renderRequestBody: true
              encodeUrl: true
              followRedirects: global
              cookies:
                send: true
                store: true
              rebuildPath: true
          - url: http://{{_['api-host']}}:{{_['port']}}/api/robot-commands/{{
              _.robot_command_id }}
            name: Update - Unauthorized (401)
            meta:
              id: req_2dd013c1de394286ac676114e3e218c2
              created: 1749099013269
              modified: 1749120119742
              isPrivate: false
              description: ""
              sortKey: -1745644223873.5
            method: PUT
            parameters:
              - id: pair_c0288d514e27477b9c84abe9dcebd85d
                name: ""
                value: ""
                description: ""
                disabled: false
            scripts:
              preRequest: >+
                // get the parent-folder and set robot-command values as
                environment variables

                const robotCommandFolder =
                insomnia.parentFolders.get('robot-command');

                if (robotCommandFolder === undefined) {
                	throw Error('robotCommandFolder not found');
                }


                // create a robotCommand as an object from the variables

                const robotCommand = {
                	"name": robotCommandFolder.environment.get("robot_command_name"),
                	"isMoveCommand": robotCommandFolder.environment.get("robot_command_is_move_command") == "True",
                	"description": robotCommandFolder.environment.get("robot_command_description"),
                };


                // add the robotCommand to the body as JSON and set header

                insomnia.request.addHeader({key: 'Content-Type', value:
                'application/json' });

                insomnia.request.body.update({
                  mode: 'raw',
                  raw: JSON.stringify(robotCommand),
                });


                // no auth is provided



              afterResponse: |+
                // 401
                insomnia.test('Check if status is 401', () => {
                    insomnia.expect(insomnia.response.code).to.eql(401);
                });




            settings:
              renderRequestBody: true
              encodeUrl: true
              followRedirects: global
              cookies:
                send: true
                store: true
              rebuildPath: true
          - url: http://{{_['api-host']}}:{{_['port']}}/api/robot-commands/{{
              _.robot_command_id }}
            name: Update - Forbidden (403)
            meta:
              id: req_6ef4c8370d04492e808e503fa59a8c8f
              created: 1749099036689
              modified: 1749120113391
              isPrivate: false
              description: ""
              sortKey: -1745644223867.25
            method: PUT
            parameters:
              - id: pair_c0288d514e27477b9c84abe9dcebd85d
                name: ""
                value: ""
                description: ""
                disabled: false
            scripts:
              preRequest: >-
                // set auth as user

                // get user credentials

                const userEmail = insomnia.environment.get("user_email");

                const userPassword = insomnia.environment.get("user_password");


                // update authorization header

                insomnia.request.auth.update(
                		{
                				type: 'basic',
                				basic: [
                						{key: 'username', value: userEmail},
                						{key: 'password', value: userPassword},
                				],
                		},
                		'basic'
                )


                // get the parent-folder and set robot-command values as
                environment variables

                const robotCommandFolder =
                insomnia.parentFolders.get('robot-command');

                if (robotCommandFolder === undefined) {
                	throw Error('robotCommandFolder not found');
                }


                // create a robotCommand as an object from the variables

                const robotCommand = {
                	"name": robotCommandFolder.environment.get("robot_command_name"),
                	"isMoveCommand": robotCommandFolder.environment.get("robot_command_is_move_command") == "True",
                	"description": robotCommandFolder.environment.get("robot_command_description"),
                };


                // add the robotCommand to the body as JSON and set header

                insomnia.request.addHeader({key: 'Content-Type', value:
                'application/json' });

                insomnia.request.body.update({
                  mode: 'raw',
                  raw: JSON.stringify(robotCommand),
                });
              afterResponse: |+
                // 403
                insomnia.test('Check if status is 403', () => {
                    insomnia.expect(insomnia.response.code).to.eql(403);
                });




            settings:
              renderRequestBody: true
              encodeUrl: true
              followRedirects: global
              cookies:
                send: true
                store: true
              rebuildPath: true
          - url: http://{{_['api-host']}}:{{_['port']}}/api/robot-commands/{{
              _.robot_command_id }}
            name: Delete - Forbidden (403)
            meta:
              id: req_e420a604cf5e4805b1647a59b85965ea
              created: 1749099136246
              modified: 1749173781721
              isPrivate: false
              description: ""
              sortKey: -1745644223686
            method: DELETE
            scripts:
              preRequest: |-
                // auth is not admin
                // get user credentials
                const userEmail = insomnia.environment.get("user_email");
                const userPassword = insomnia.environment.get("user_password");

                // update authorization header
                insomnia.request.auth.update(
                		{
                				type: 'basic',
                				basic: [
                						{key: 'username', value: userEmail},
                						{key: 'password', value: userPassword},
                				],
                		},
                		'basic'
                )
              afterResponse: |-
                // 403
                insomnia.test('Check if status is 403', () => {
                    insomnia.expect(insomnia.response.code).to.eql(403);
                });
            settings:
              renderRequestBody: true
              encodeUrl: true
              followRedirects: global
              cookies:
                send: true
                store: true
              rebuildPath: true
          - url: http://{{_['api-host']}}:{{_['port']}}/api/robot-commands/{{
              _.robot_command_id }}
            name: Delete - Unauthorized (401)
            meta:
              id: req_8639d98b4f2e43d796be361ca9683447
              created: 1749099167384
              modified: 1749125212274
              isPrivate: false
              description: ""
              sortKey: -1745644223698.5
            method: DELETE
            scripts:
              preRequest: // no auth provided
              afterResponse: |+
                // 401
                insomnia.test('Check if status is 401', () => {
                    insomnia.expect(insomnia.response.code).to.eql(401);
                });




            settings:
              renderRequestBody: true
              encodeUrl: true
              followRedirects: global
              cookies:
                send: true
                store: true
              rebuildPath: true
          - url: http://{{_['api-host']}}:{{_['port']}}/api/robot-commands/{{
              _.robot_command_id }}
            name: Modify - Unauthorized (401)
            meta:
              id: req_e13b28db387a4133af509a8566a19b63
              created: 1749099329408
              modified: 1749181081841
              isPrivate: false
              description: ""
              sortKey: -1745644223773.5
            method: PATCH
            headers:
              - name: User-Agent
                value: insomnia/11.0.2
            scripts:
              preRequest: >-
                // get the parent-folder and set robot-command values as
                environment variables

                const robotCommandFolder =
                insomnia.parentFolders.get('robot-command');

                if (robotCommandFolder === undefined) {
                	throw Error('robotCommandFolder not found');
                }


                // create a robotCommand as an object from the variables

                const robotCommand = {
                	"name": robotCommandFolder.environment.get("robot_command_name"),
                	"isMoveCommand": robotCommandFolder.environment.get("robot_command_is_move_command") == "True",
                	"description": robotCommandFolder.environment.get("robot_command_description"),
                };


                // add the robotCommand to the body as JSON and set header

                insomnia.request.addHeader({key: 'Content-Type', value:
                'application/json' });

                insomnia.request.body.update({
                  mode: 'raw',
                  raw: JSON.stringify(robotCommand),
                });


                // no auth is provided
              afterResponse: |-
                // 401
                insomnia.test('Check if status is 401', () => {
                    insomnia.expect(insomnia.response.code).to.eql(401);
                });
            settings:
              renderRequestBody: true
              encodeUrl: true
              followRedirects: global
              cookies:
                send: true
                store: true
              rebuildPath: true
          - url: http://{{_['api-host']}}:{{_['port']}}/api/robot-commands/{{
              _.robot_command_id }}
            name: Modify - Forbidden (403)
            meta:
              id: req_112d9ab2fc79486da61b9a90bf85a21d
              created: 1749099349326
              modified: 1749181152002
              isPrivate: false
              description: ""
              sortKey: -1745644223767.25
            method: PATCH
            headers:
              - name: User-Agent
                value: insomnia/11.0.2
            scripts:
              preRequest: >-
                // set auth as user

                // get user credentials

                const userEmail = insomnia.environment.get("user_email");

                const userPassword = insomnia.environment.get("user_password");


                // update authorization header

                insomnia.request.auth.update(
                		{
                				type: 'basic',
                				basic: [
                						{key: 'username', value: userEmail},
                						{key: 'password', value: userPassword},
                				],
                		},
                		'basic'
                )


                // get the parent-folder and set robot-command values as
                environment variables

                const robotCommandFolder =
                insomnia.parentFolders.get('robot-command');

                if (robotCommandFolder === undefined) {
                	throw Error('robotCommandFolder not found');
                }


                // create a robotCommand as an object from the variables

                const robotCommand = {
                	"name": robotCommandFolder.environment.get("robot_command_name"),
                	"isMoveCommand": robotCommandFolder.environment.get("robot_command_is_move_command") == "True",
                	"description": robotCommandFolder.environment.get("robot_command_description"),
                };


                // add the robotCommand to the body as JSON and set header

                insomnia.request.addHeader({key: 'Content-Type', value:
                'application/json' });

                insomnia.request.body.update({
                  mode: 'raw',
                  raw: JSON.stringify(robotCommand),
                });
              afterResponse: |-
                // 403
                insomnia.test('Check if status is 403', () => {
                    insomnia.expect(insomnia.response.code).to.eql(403);
                });
            settings:
              renderRequestBody: true
              encodeUrl: true
              followRedirects: global
              cookies:
                send: true
                store: true
              rebuildPath: true
          - url: http://{{_['api-host']}}:{{_['port']}}/api/robot-commands
            name: Create Secondary - Created (201)
            meta:
              id: req_1e829c5b5a8949d088b8dd877d5c3bfb
              created: 1749123199030
              modified: 1749181715385
              isPrivate: false
              description: ""
              sortKey: -1745644223854.75
            method: POST
            scripts:
              preRequest: |-
                // get admin credentials
                const adminEmail = insomnia.environment.get("admin_email");
                const adminPassword = insomnia.environment.get("admin_password");

                // update authorization header
                insomnia.request.auth.update(
                		{
                				type: 'basic',
                				basic: [
                						{key: 'username', value: adminEmail},
                						{key: 'password', value: adminPassword},
                				],
                		},
                		'basic'
                )

                // get the parent-folder and set robot-command values as environment variables
                const robotCommandFolder = insomnia.parentFolders.get('robot-command');
                if (robotCommandFolder === undefined) {
                	throw Error('robotCommandFolder not found');
                }

                // create the new command with test values
                const timestamp = Date.now();
                robotCommandFolder.environment.set('robot_command_name_secondary', `TEST_NAME_SECONDARY_${timestamp}`);

                // create the new robotCommand as an object
                const robotCommand = {
                	"name": robotCommandFolder.environment.get("robot_command_name_secondary"),
                	"isMoveCommand": false,
                	"description": `TEST_DESC_SECONDARY_${timestamp}`,
                };

                // add the robotCommand to the body as JSON and set header
                insomnia.request.addHeader({key: 'Content-Type', value: 'application/json' });
                insomnia.request.body.update({
                  mode: 'raw',
                  raw: JSON.stringify(robotCommand),
                });
              afterResponse: >+
                // get the parent-folder and set robot-command values as
                environment variables

                const robotCommandFolder =
                insomnia.parentFolders.get('robot-command');

                if (robotCommandFolder === undefined) {
                	throw Error('robotCommandFolder not found');
                }


                // create a robotCommand object from environment variables

                const robotCommand = {
                	"name": robotCommandFolder.environment.get("robot_command_name"),
                	"isMoveCommand": robotCommandFolder.environment.get("robot_command_is_move_command") == "True",
                	"description": robotCommandFolder.environment.get("robot_command_description"),
                };


                // TEST: created 201

                insomnia.test('Check if status is 201', () => {
                    insomnia.expect(insomnia.response.code).to.eql(201);
                });


                if(insomnia.response.code == 201){
                	const body = insomnia.response.json();

                	// TEST: check if the returned object is a valid robotCommand
                	insomnia.test('Check if returned object has correct keys and is a valid robotCommand', () => {  
                		insomnia.expect(body).to.be.an('object').that.has.all.keys('id','name','description','isMoveCommand','createdDate','modifiedDate');
                	});

                	// not a test - set environment variables
                	robotCommandFolder.environment.set('robot_command_id_secondary', body.id);
                	
                	const robotCommandNameSecondary = robotCommandFolder.environment.get("robot_command_name_secondary")

                	// TEST: check if the returned object has the correct values
                	insomnia.test('Check if returned robotCommand has the correct values', () => {
                		insomnia.expect(body.name).to.eql(robotCommandNameSecondary);
                	})
                }






            settings:
              renderRequestBody: true
              encodeUrl: true
              followRedirects: global
              cookies:
                send: true
                store: true
              rebuildPath: true
          - url: http://{{_['api-host']}}:{{_['port']}}/api/robot-commands/{{
              _.robot_command_id_secondary }}
            name: Delete Secondary - No Content (204)
            meta:
              id: req_7e81d451432049e3af17e4a4547fa1ef
              created: 1749124889193
              modified: 1749179604194
              isPrivate: false
              description: ""
              sortKey: -1745644223742.25
            method: DELETE
            scripts:
              preRequest: >-
                // get admin credentials

                const adminEmail = insomnia.environment.get("admin_email");

                const adminPassword =
                insomnia.environment.get("admin_password");


                // update authorization header

                insomnia.request.auth.update(
                		{
                				type: 'basic',
                				basic: [
                						{key: 'username', value: adminEmail},
                						{key: 'password', value: adminPassword},
                				],
                		},
                		'basic'
                )
              afterResponse: |-
                insomnia.test('Check if status is 204', () => {
                    insomnia.expect(insomnia.response.code).to.eql(204);
                });
            settings:
              renderRequestBody: true
              encodeUrl: true
              followRedirects: global
              cookies:
                send: true
                store: true
              rebuildPath: true
          - url: http://{{_['api-host']}}:{{_['port']}}/api/robot-commands/move
            name: Get All Move - OK (200)
            meta:
              id: req_4bdb9588281f44998842433ed01a69bd
              created: 1749173839770
              modified: 1749181699170
              isPrivate: false
              description: ""
              sortKey: -1745644224211
            method: GET
            scripts:
              preRequest: // no auth
              afterResponse: >-
                // TEST: success 200

                insomnia.test('Check if status is 200', () => {
                    insomnia.expect(insomnia.response.code).to.eql(200);
                });


                const body = insomnia.response.json();


                // TEST: if commands are returned

                insomnia.test('Check if returned objects have correct keys', ()
                => {
                	body.forEach(command => {
                		insomnia.expect(command).to.be.an('object').that.has.all.keys('id','name','description','isMoveCommand','createdDate','modifiedDate');
                	});
                });


                // get the parent-folder

                const robotCommandFolder =
                insomnia.parentFolders.get('robot-command');

                if (robotCommandFolder === undefined) {
                	throw Error('robotCommandFolder not found');
                }


                // create a robotCommand object from environment variables

                const robotCommand = {
                	name: robotCommandFolder.environment.get("robot_command_name"),
                	isMoveCommand: robotCommandFolder.environment.get("robot_command_is_move_command") == "True",
                	description: robotCommandFolder.environment.get("robot_command_description"),
                	id: robotCommandFolder.environment.get("robot_command_id"),
                	createdDate: robotCommandFolder.environment.get("robot_command_created_date"),
                	modifiedDate: robotCommandFolder.environment.get("robot_command_modified_date"),
                };


                // TEST: if response doesn't include the created command, as it
                isn't a move command

                insomnia.test("Check if returned objects don't include the
                created command", () => {
                	var found = false;
                	body.forEach(command => {
                		if(command.id == robotCommand.id) {
                			found = true;
                		}
                	})
                	insomnia.expect(found).to.eql(false);
                })
            settings:
              renderRequestBody: true
              encodeUrl: true
              followRedirects: global
              cookies:
                send: true
                store: true
              rebuildPath: true
        scripts:
          preRequest: ""
        environment:
          robot_command_name: TEST_NAME_1749185746200_UPDATE
          robot_command_is_move_command: true
          robot_command_description: TEST_DESC_1749185746200_UPDATE
          robot_command_id: 3
          robot_command_created_date: 2025-06-06T04:55:45.12055Z
          robot_command_modified_date: 2025-06-06T04:55:48.42531Z
          robot_command_id_secondary: 4
          robot_command_name_secondary: TEST_NAME_SECONDARY_1749185747500
      - name: map
        meta:
          id: fld_09873e8e27c9448e9445e2f6ad55424f
          created: 1749044569063
          modified: 1749185759007
          sortKey: -1745549613221.375
          description: ""
        children:
          - url: http://{{_['api-host']}}:{{_['port']}}/api/maps/square
            name: Get Square - OK (200)
            meta:
              id: req_55844de19410400f8ec31b59226b56da
              created: 1749044569064
              modified: 1749182659755
              isPrivate: false
              description: ""
              sortKey: -1745644256505
            method: GET
            scripts:
              preRequest: // no auth
              afterResponse: >-
                // TEST: success 200

                insomnia.test('Check if status is 200', () => {
                    insomnia.expect(insomnia.response.code).to.eql(200);
                });


                const body = insomnia.response.json();


                // TEST: if maps are returned

                insomnia.test('Check if returned objects have correct keys', ()
                => {
                		body.forEach(map => {
                				insomnia.expect(map).to.be.an('object').that.has.all.keys('id','name','description','rows','columns','isSquare','createdDate','modifiedDate');
                		});
                });


                // get the parent-folder

                const mapFolder = insomnia.parentFolders.get('map');

                if (mapFolder === undefined) {
                		throw Error('mapFolder not found');
                }


                // create a map from the env variables

                const createdMap = {
                		name: mapFolder.environment.get("map_name"),
                		columns: mapFolder.environment.get("map_columns"),
                		rows: mapFolder.environment.get("map_rows"),
                		id: mapFolder.environment.get("map_id"),
                		createdDate: mapFolder.environment.get("map_created_date"),
                		modifiedDate: mapFolder.environment.get("map_modified_date")
                };


                // TEST: if response doesn't include the created map

                insomnia.test("Check if returned objects don't include the
                created map", () => {
                	var found = false;
                	body.forEach(map => {
                		if(map.id == createdMap.id) {
                			found = true;
                		}
                	})
                	insomnia.expect(found).to.eql(false);
                })
            settings:
              renderRequestBody: true
              encodeUrl: true
              followRedirects: global
              cookies:
                send: true
                store: true
              rebuildPath: true
          - url: http://{{_['api-host']}}:{{_['port']}}/api/maps
            name: Create - Created (201)
            meta:
              id: req_73db9102c04441bfa88c8066e182c69a
              created: 1749044569064
              modified: 1749183619193
              isPrivate: false
              description: ""
              sortKey: -1745644256705
            method: POST
            scripts:
              preRequest: >-
                // get admin credentials

                const adminEmail = insomnia.environment.get("admin_email");

                const adminPassword =
                insomnia.environment.get("admin_password");


                // update authorization header

                insomnia.request.auth.update(
                		{
                				type: 'basic',
                				basic: [
                						{key: 'username', value: adminEmail},
                						{key: 'password', value: adminPassword},
                				],
                		},
                		'basic'
                )


                // get the parent-folder

                const mapFolder = insomnia.parentFolders.get('map');

                if (mapFolder === undefined) {
                		throw Error('mapFolder not found');
                }


                // create the new map with test values

                const timestamp = Date.now();

                mapFolder.environment.set('map_name', `TEST_NAME_${timestamp}`);

                mapFolder.environment.set('map_columns', 10);

                mapFolder.environment.set('map_rows', 50);


                // create the new map as an object

                const map = {
                		name: mapFolder.environment.get("map_name"),
                		columns: mapFolder.environment.get("map_columns"),
                		rows: mapFolder.environment.get("map_rows"),
                };


                // add the robotCommand to the body as JSON and set header

                insomnia.request.addHeader({key: 'Content-Type', value:
                'application/json' });

                insomnia.request.body.update({
                		mode: 'raw',
                		raw: JSON.stringify(map),
                });
              afterResponse: >-
                // get the parent-folder

                const mapFolder = insomnia.parentFolders.get('map');

                if (mapFolder === undefined) {
                	throw Error('mapFolder not found');
                }


                // create a map from the env variables

                const map = {
                	name: mapFolder.environment.get("map_name"),
                	columns: mapFolder.environment.get("map_columns"),
                	rows: mapFolder.environment.get("map_rows"),
                };


                // TEST: created 201

                insomnia.test('Check if status is 201', () => {
                    insomnia.expect(insomnia.response.code).to.eql(201);
                });


                if(insomnia.response.code == 201){
                		const body = insomnia.response.json();

                		// TEST: check if the returned object is a valid map
                		insomnia.test('Check if returned object has correct keys and is a valid map', () => {  
                				insomnia.expect(body).to.be.an('object').that.has.all.keys('id','name','description','rows','columns','isSquare','createdDate','modifiedDate');
                		});

                		// TEST: check if the returned object has the correct values
                		insomnia.test('Check if returned map has the correct values', () => {
                				insomnia.expect(body.name).to.eql(map.name);
                				insomnia.expect(body.columns).to.eql(map.columns);
                				insomnia.expect(body.rows).to.eql(map.rows);
                		})

                		// not a test - set environment variables
                		mapFolder.environment.set('map_id', body.id);
                		mapFolder.environment.set('map_created_date', body.createdDate);
                		mapFolder.environment.set('map_modified_date', body.modifiedDate);
                }
            settings:
              renderRequestBody: true
              encodeUrl: true
              followRedirects: global
              cookies:
                send: true
                store: true
              rebuildPath: true
          - url: http://{{_['api-host']}}:{{_['port']}}/api/maps/{{ _.map_id }}
            name: Delete - No Content (204)
            meta:
              id: req_92dda500aaad4d7d87d8373d59524ffd
              created: 1749044569064
              modified: 1749185328538
              isPrivate: false
              description: ""
              sortKey: -1745644228269.625
            method: DELETE
            scripts:
              preRequest: >-
                // get admin credentials

                const adminEmail = insomnia.environment.get("admin_email");

                const adminPassword =
                insomnia.environment.get("admin_password");


                // update authorization header

                insomnia.request.auth.update(
                		{
                				type: 'basic',
                				basic: [
                						{key: 'username', value: adminEmail},
                						{key: 'password', value: adminPassword},
                				],
                		},
                		'basic'
                )
              afterResponse: |-
                insomnia.test('Check if status is 204', () => {
                    insomnia.expect(insomnia.response.code).to.eql(204);
                });
            settings:
              renderRequestBody: true
              encodeUrl: true
              followRedirects: global
              cookies:
                send: true
                store: true
              rebuildPath: true
          - url: http://{{_['api-host']}}:{{_['port']}}/api/maps
            name: Get All - OK (200)
            meta:
              id: req_e327d59837774b26873fe41389f66f99
              created: 1749044569064
              modified: 1749181732825
              isPrivate: false
              description: ""
              sortKey: -1745644256605
            method: GET
            scripts:
              preRequest: // no auth
              afterResponse: >-
                // TEST: success 200

                insomnia.test('Check if status is 200', () => {
                    insomnia.expect(insomnia.response.code).to.eql(200);
                });


                const body = insomnia.response.json();


                // TEST: if maps are returned

                insomnia.test('Check if returned objects have correct keys', ()
                => {
                		body.forEach(map => {
                				insomnia.expect(map).to.be.an('object').that.has.all.keys('id','name','description','rows','columns','isSquare','createdDate','modifiedDate');
                		});
                });


                // get the parent-folder

                const mapFolder = insomnia.parentFolders.get('map');

                if (mapFolder === undefined) {
                		throw Error('mapFolder not found');
                }


                // create a map from the env variables

                const createdMap = {
                		name: mapFolder.environment.get("map_name"),
                		columns: mapFolder.environment.get("map_columns"),
                		rows: mapFolder.environment.get("map_rows"),
                		id: mapFolder.environment.get("map_id"),
                		createdDate: mapFolder.environment.get("map_created_date"),
                		modifiedDate: mapFolder.environment.get("map_modified_date")
                };


                // TEST: if response includes the created map

                insomnia.test('Check if returned objects include the created
                map', () => {
                	var found = false;
                	body.forEach(map => {
                		if(map.id == createdMap.id) {
                			found = true;
                			insomnia.expect(map.name).to.eql(createdMap.name);
                			insomnia.expect(map.columns).to.eql(createdMap.columns);
                			insomnia.expect(map.rows).to.eql(createdMap.rows);
                			insomnia.expect(map.createdDate).to.eql(createdMap.createdDate);
                			insomnia.expect(map.modifiedDate).to.eql(createdMap.modifiedDate);
                		}
                	})
                	insomnia.expect(found).to.eql(true);
                })
            settings:
              renderRequestBody: true
              encodeUrl: true
              followRedirects: global
              cookies:
                send: true
                store: true
              rebuildPath: true
          - url: http://{{_['api-host']}}:{{_['port']}}/api/maps/{{ _.map_id }}
            name: Get By Id - OK (200)
            meta:
              id: req_6ed8ef9a102044faa36911adec36ab73
              created: 1749044569065
              modified: 1749181949392
              isPrivate: false
              description: ""
              sortKey: -1745644256555
            method: GET
            scripts:
              preRequest: // no auth
              afterResponse: >-
                // TEST: success 200

                insomnia.test('Check if status is 200', () => {
                    insomnia.expect(insomnia.response.code).to.eql(200);
                });


                const body = insomnia.response.json();


                // TEST: if command is returned

                insomnia.test('Check if returned object has correct keys', () =>
                {
                		insomnia.expect(body).to.be.an('object').that.has.all.keys('id','name','description','rows','columns','isSquare','createdDate','modifiedDate');
                });


                // get the parent-folder

                const mapFolder = insomnia.parentFolders.get('map');

                if (mapFolder === undefined) {
                		throw Error('mapFolder not found');
                }


                // create a map from the env variables

                const createdMap = {
                		name: mapFolder.environment.get("map_name"),
                		columns: mapFolder.environment.get("map_columns"),
                		rows: mapFolder.environment.get("map_rows"),
                		id: mapFolder.environment.get("map_id"),
                		createdDate: mapFolder.environment.get("map_created_date"),
                		modifiedDate: mapFolder.environment.get("map_modified_date")
                };


                // TEST: if response includes the created map

                insomnia.test('Check if returned objects include the created
                map', () => {
                		insomnia.expect(body.name).to.eql(createdMap.name);
                		insomnia.expect(body.columns).to.eql(createdMap.columns);
                		insomnia.expect(body.rows).to.eql(createdMap.rows);
                		insomnia.expect(body.createdDate).to.eql(createdMap.createdDate);
                		insomnia.expect(body.modifiedDate).to.eql(createdMap.modifiedDate);
                })
            settings:
              renderRequestBody: true
              encodeUrl: true
              followRedirects: global
              cookies:
                send: true
                store: true
              rebuildPath: true
          - url: http://{{_['api-host']}}:{{_['port']}}/api/maps/{{ _.map_id }}/5-10
            name: Get Coordinate (as Admin) - OK (200)
            meta:
              id: req_b1a1e36b52844079bfdf76dac30de1e1
              created: 1749044569065
              modified: 1749183039440
              isPrivate: false
              description: ""
              sortKey: -1745644256455
            method: GET
            scripts:
              preRequest: >-
                // get admin credentials

                const adminEmail = insomnia.environment.get("admin_email");

                const adminPassword =
                insomnia.environment.get("admin_password");


                // update authorization header

                insomnia.request.auth.update(
                		{
                				type: 'basic',
                				basic: [
                						{key: 'username', value: adminEmail},
                						{key: 'password', value: adminPassword},
                				],
                		},
                		'basic'
                )
              afterResponse: |-
                insomnia.test('Check if status is 200', () => {
                    insomnia.expect(insomnia.response.code).to.eql(200);
                });

                const textBody = insomnia.response.text();

                insomnia.test('Check if response is correct value', () => {
                		insomnia.expect(textBody).to.eql("true");
                })
            settings:
              renderRequestBody: true
              encodeUrl: true
              followRedirects: global
              cookies:
                send: true
                store: true
              rebuildPath: true
          - url: http://{{_['api-host']}}:{{_['port']}}/api/maps/{{ _.map_id }}
            name: Modify - OK (200)
            meta:
              id: req_c522d00d30d947cb8765c3db8414f9fd
              created: 1749044569065
              modified: 1749184860918
              isPrivate: false
              description: ""
              sortKey: -1745644256205
            method: PATCH
            headers:
              - name: User-Agent
                value: insomnia/11.0.2
            scripts:
              preRequest: >-
                // get admin credentials

                const adminEmail = insomnia.environment.get("admin_email");

                const adminPassword =
                insomnia.environment.get("admin_password");


                // update authorization header

                insomnia.request.auth.update(
                		{
                				type: 'basic',
                				basic: [
                						{key: 'username', value: adminEmail},
                						{key: 'password', value: adminPassword},
                				],
                		},
                		'basic'
                )


                // get the parent-folder

                const mapFolder = insomnia.parentFolders.get('map');

                if (mapFolder === undefined) {
                		throw Error('mapFolder not found');
                }


                // set the rows to equal columns

                mapFolder.environment.set('map_rows',
                mapFolder.environment.get("map_columns"));


                // create the new map as an object

                const map = {
                		rows: mapFolder.environment.get("map_rows"),
                };


                // add the robotCommand to the body as JSON and set header

                insomnia.request.addHeader({key: 'Content-Type', value:
                'application/json' });

                insomnia.request.body.update({
                		mode: 'raw',
                		raw: JSON.stringify(map),
                });
              afterResponse: >-
                // get the parent-folder

                const mapFolder = insomnia.parentFolders.get('map');

                if (mapFolder === undefined) {
                	throw Error('mapFolder not found');
                }


                // create a map from the env variables

                const map = {
                	name: mapFolder.environment.get("map_name"),
                	columns: mapFolder.environment.get("map_columns"),
                	rows: mapFolder.environment.get("map_rows"),
                	createdDate: mapFolder.environment.get("map_created_date"),
                	modifiedDate: mapFolder.environment.get("map_modified_date"),
                };


                // TEST: 200

                insomnia.test('Check if status is 200', () => {
                    insomnia.expect(insomnia.response.code).to.eql(200);
                });


                if(insomnia.response.code == 200){
                		const body = insomnia.response.json();

                		// TEST: check if the returned object is a valid map
                		insomnia.test('Check if returned object has correct keys and is a valid map', () => {  
                				insomnia.expect(body).to.be.an('object').that.has.all.keys('id','name','description','rows','columns','isSquare','createdDate','modifiedDate');
                		});
                	
                		// TEST: check if the modified date has changed, and created date has remained the same
                		insomnia.test("Check if the map's modified date has changed and created date has remained the same", () => {
                				insomnia.expect(body.createdDate).to.eql(map.createdDate);
                				insomnia.expect(body.modifiedDate != map.modifiedDate);
                				insomnia.expect(body.modifiedDate != body.createdDate);
                		});

                		// TEST: check if the returned object has the correct values
                		insomnia.test('Check if returned map has the correct values', () => {
                				insomnia.expect(body.name).to.eql(map.name);
                				insomnia.expect(body.columns).to.eql(map.columns);
                				insomnia.expect(body.rows).to.eql(map.rows);
                				insomnia.expect(body.rows).to.eql(body.columns); // rows and columns are same
                				insomnia.expect(body.isSquare).to.eql(true);
                		})

                		// not a test - set environment variables
                		mapFolder.environment.set('map_modified_date', body.modifiedDate);
                }
            settings:
              renderRequestBody: true
              encodeUrl: true
              followRedirects: global
              cookies:
                send: true
                store: true
              rebuildPath: true
          - url: http://{{_['api-host']}}:{{_['port']}}/api/maps/{{ _.map_id }}
            name: Update - OK (200)
            meta:
              id: req_cdec7292654f46faac82df5d2f6b5530
              created: 1749044569065
              modified: 1749183992167
              isPrivate: false
              description: ""
              sortKey: -1745644256305
            method: PUT
            scripts:
              preRequest: >-
                // get admin credentials

                const adminEmail = insomnia.environment.get("admin_email");

                const adminPassword =
                insomnia.environment.get("admin_password");


                // update authorization header

                insomnia.request.auth.update(
                		{
                				type: 'basic',
                				basic: [
                						{key: 'username', value: adminEmail},
                						{key: 'password', value: adminPassword},
                				],
                		},
                		'basic'
                )


                // get the parent-folder

                const mapFolder = insomnia.parentFolders.get('map');

                if (mapFolder === undefined) {
                		throw Error('mapFolder not found');
                }


                // create the new map with test values

                const timestamp = Date.now();

                mapFolder.environment.set('map_name',
                `TEST_NAME_${timestamp}_UPDATE`);

                mapFolder.environment.set('map_columns',
                mapFolder.environment.get("map_columns") * 2);

                mapFolder.environment.set('map_rows',
                mapFolder.environment.get("map_rows") * 2);


                // create the new map as an object

                const map = {
                		name: mapFolder.environment.get("map_name"),
                		columns: mapFolder.environment.get("map_columns"),
                		rows: mapFolder.environment.get("map_rows"),
                };


                // add the robotCommand to the body as JSON and set header

                insomnia.request.addHeader({key: 'Content-Type', value:
                'application/json' });

                insomnia.request.body.update({
                		mode: 'raw',
                		raw: JSON.stringify(map),
                });
              afterResponse: >-
                // get the parent-folder

                const mapFolder = insomnia.parentFolders.get('map');

                if (mapFolder === undefined) {
                	throw Error('mapFolder not found');
                }


                // create a map from the env variables

                const map = {
                	name: mapFolder.environment.get("map_name"),
                	columns: mapFolder.environment.get("map_columns"),
                	rows: mapFolder.environment.get("map_rows"),
                	createdDate: mapFolder.environment.get("map_created_date"),
                	modifiedDate: mapFolder.environment.get("map_modified_date"),
                };


                // TEST: 200

                insomnia.test('Check if status is 200', () => {
                    insomnia.expect(insomnia.response.code).to.eql(200);
                });


                if(insomnia.response.code == 200){
                		const body = insomnia.response.json();

                		// TEST: check if the returned object is a valid map
                		insomnia.test('Check if returned object has correct keys and is a valid map', () => {  
                				insomnia.expect(body).to.be.an('object').that.has.all.keys('id','name','description','rows','columns','isSquare','createdDate','modifiedDate');
                		});
                	
                		// TEST: check if the modified date has changed, and created date has remained the same
                		insomnia.test("Check if the map's modified date has changed and created date has remained the same", () => {
                				insomnia.expect(body.createdDate).to.eql(map.createdDate);
                				insomnia.expect(body.modifiedDate != map.modifiedDate);
                				insomnia.expect(body.modifiedDate != body.createdDate);
                		});

                		// TEST: check if the returned object has the correct values
                		insomnia.test('Check if returned map has the correct values', () => {
                				insomnia.expect(body.name).to.eql(map.name);
                				insomnia.expect(body.columns).to.eql(map.columns);
                				insomnia.expect(body.rows).to.eql(map.rows);
                		})

                		// not a test - set environment variables
                		mapFolder.environment.set('map_modified_date', body.modifiedDate);
                }
            settings:
              renderRequestBody: true
              encodeUrl: true
              followRedirects: global
              cookies:
                send: true
                store: true
              rebuildPath: true
          - url: http://{{_['api-host']}}:{{_['port']}}/api/maps/0
            name: Get By Id - Not Found (404)
            meta:
              id: req_2fcf18e118f24c16ad1677e8adfea71f
              created: 1749180052716
              modified: 1749181965987
              isPrivate: false
              description: ""
              sortKey: -1745644256530
            method: GET
            scripts:
              preRequest: // no auth
              afterResponse: |-
                insomnia.test('Check if status is 404', () => {
                    insomnia.expect(insomnia.response.code).to.eql(404);
                });
            settings:
              renderRequestBody: true
              encodeUrl: true
              followRedirects: global
              cookies:
                send: true
                store: true
              rebuildPath: true
          - url: http://{{_['api-host']}}:{{_['port']}}/api/maps/{{ _.map_id }}/10-200
            name: Get Coordinate - Unauthorized (401)
            meta:
              id: req_0c0457dc066647d1bbd8273b6711df5f
              created: 1749180237953
              modified: 1749183508009
              isPrivate: false
              description: ""
              sortKey: -1745644256430
            method: GET
            scripts:
              preRequest: // no auth
              afterResponse: |-
                // 401
                insomnia.test('Check if status is 401', () => {
                    insomnia.expect(insomnia.response.code).to.eql(401);
                });
            settings:
              renderRequestBody: true
              encodeUrl: true
              followRedirects: global
              cookies:
                send: true
                store: true
              rebuildPath: true
          - url: http://{{_['api-host']}}:{{_['port']}}/api/maps/0/10-200
            name: Get Coordinate - Not Found (404)
            meta:
              id: req_0ec525e76dcf44c3a8d6ccad94357b58
              created: 1749180333782
              modified: 1749183598472
              isPrivate: false
              description: ""
              sortKey: -1745644256411.25
            method: GET
            scripts:
              preRequest: >-
                // get admin credentials

                const adminEmail = insomnia.environment.get("admin_email");

                const adminPassword =
                insomnia.environment.get("admin_password");


                // update authorization header

                insomnia.request.auth.update(
                		{
                				type: 'basic',
                				basic: [
                						{key: 'username', value: adminEmail},
                						{key: 'password', value: adminPassword},
                				],
                		},
                		'basic'
                )
              afterResponse: |-
                insomnia.test('Check if status is 404', () => {
                    insomnia.expect(insomnia.response.code).to.eql(404);
                });
            settings:
              renderRequestBody: true
              encodeUrl: true
              followRedirects: global
              cookies:
                send: true
                store: true
              rebuildPath: true
          - url: http://{{_['api-host']}}:{{_['port']}}/api/maps
            name: Create - Bad Request (400)
            meta:
              id: req_e04ba3b8c2534570b8dec174a52d1141
              created: 1749180362321
              modified: 1749183622189
              isPrivate: false
              description: ""
              sortKey: -1745644256655
            method: POST
            scripts:
              preRequest: >-
                // set body to empty string

                insomnia.request.addHeader({key: 'Content-Type', value:
                'application/json' });

                insomnia.request.body.update({
                		mode: 'raw',
                		raw: "",
                });


                // get admin credentials

                const adminEmail = insomnia.environment.get("admin_email");

                const adminPassword =
                insomnia.environment.get("admin_password");


                // update authorization header

                insomnia.request.auth.update(
                		{
                				type: 'basic',
                				basic: [
                						{key: 'username', value: adminEmail},
                						{key: 'password', value: adminPassword},
                				],
                		},
                		'basic'
                )
              afterResponse: |-
                // 400
                insomnia.test('Check if status is 400', () => {
                    insomnia.expect(insomnia.response.code).to.eql(400);
                });
            settings:
              renderRequestBody: true
              encodeUrl: true
              followRedirects: global
              cookies:
                send: true
                store: true
              rebuildPath: true
          - url: http://{{_['api-host']}}:{{_['port']}}/api/maps
            name: Create - Unauthorized (401)
            meta:
              id: req_20ada7342df945448c4cb6dd1c955eb6
              created: 1749180372608
              modified: 1749183624422
              isPrivate: false
              description: ""
              sortKey: -1745644256630
            method: POST
            scripts:
              preRequest: >-
                // get the parent-folder

                const mapFolder = insomnia.parentFolders.get('map');

                if (mapFolder === undefined) {
                	throw Error('mapFolder not found');
                }


                // create the new map as an object from env values

                const map = {
                		name: mapFolder.environment.get("map_name"),
                		columns: mapFolder.environment.get("map_columns"),
                		rows: mapFolder.environment.get("map_rows"),
                };


                // add the robotCommand to the body as JSON and set header

                insomnia.request.addHeader({key: 'Content-Type', value:
                'application/json' });

                insomnia.request.body.update({
                		mode: 'raw',
                		raw: JSON.stringify(map),
                });


                // no auth is provided
              afterResponse: |-
                // 401
                insomnia.test('Check if status is 401', () => {
                    insomnia.expect(insomnia.response.code).to.eql(401);
                });
            settings:
              renderRequestBody: true
              encodeUrl: true
              followRedirects: global
              cookies:
                send: true
                store: true
              rebuildPath: true
          - url: http://{{_['api-host']}}:{{_['port']}}/api/maps
            name: Create - Forbidden (403)
            meta:
              id: req_4c0e7e75a2ab46b899ef42ba44868930
              created: 1749180380018
              modified: 1749183626729
              isPrivate: false
              description: ""
              sortKey: -1745644256617.5
            method: POST
            scripts:
              preRequest: >-
                // get the parent-folder

                const mapFolder = insomnia.parentFolders.get('map');

                if (mapFolder === undefined) {
                		throw Error('mapFolder not found');
                }


                // create the new map as an object from env values

                const map = {
                		name: mapFolder.environment.get("map_name"),
                		columns: mapFolder.environment.get("map_columns"),
                		rows: mapFolder.environment.get("map_rows"),
                };


                // add the robotCommand to the body as JSON and set header

                insomnia.request.addHeader({key: 'Content-Type', value:
                'application/json' });

                insomnia.request.body.update({
                		mode: 'raw',
                		raw: JSON.stringify(map),
                });


                // set auth as user

                // get user credentials

                const userEmail = insomnia.environment.get("user_email");

                const userPassword = insomnia.environment.get("user_password");


                // update authorization header

                insomnia.request.auth.update(
                		{
                				type: 'basic',
                				basic: [
                						{key: 'username', value: userEmail},
                						{key: 'password', value: userPassword},
                				],
                		},
                		'basic'
                )
              afterResponse: |-
                // 403
                insomnia.test('Check if status is 403', () => {
                    insomnia.expect(insomnia.response.code).to.eql(403);
                });
            settings:
              renderRequestBody: true
              encodeUrl: true
              followRedirects: global
              cookies:
                send: true
                store: true
              rebuildPath: true
          - url: http://{{_['api-host']}}:{{_['port']}}/api/maps
            name: Create - Conflict (409)
            meta:
              id: req_13db780f0de943a7b231618404754cd9
              created: 1749180389543
              modified: 1749183629325
              isPrivate: false
              description: ""
              sortKey: -1745644256611.25
            method: POST
            scripts:
              preRequest: >-
                // get admin credentials

                const adminEmail = insomnia.environment.get("admin_email");

                const adminPassword =
                insomnia.environment.get("admin_password");


                // update authorization header

                insomnia.request.auth.update(
                		{
                				type: 'basic',
                				basic: [
                						{key: 'username', value: adminEmail},
                						{key: 'password', value: adminPassword},
                				],
                		},
                		'basic'
                )


                // get the parent-folder

                const mapFolder = insomnia.parentFolders.get('map');

                if (mapFolder === undefined) {
                		throw Error('mapFolder not found');
                }


                // create the new map as an object from env values

                const map = {
                		name: mapFolder.environment.get("map_name"),
                		columns: mapFolder.environment.get("map_columns"),
                		rows: mapFolder.environment.get("map_rows"),
                };


                // add the robotCommand to the body as JSON and set header

                insomnia.request.addHeader({key: 'Content-Type', value:
                'application/json' });

                insomnia.request.body.update({
                		mode: 'raw',
                		raw: JSON.stringify(map),
                });
              afterResponse: >-
                // 409

                insomnia.test('Check if status is 409', () => {
                    insomnia.expect(insomnia.response.code).to.eql(409);
                });


                // get the parent-folder

                const mapFolder = insomnia.parentFolders.get('map');

                if (mapFolder === undefined) {
                	throw Error('mapFolder not found');
                }


                const body = insomnia.response.json();


                const mapName = mapFolder.environment.get("map_name")


                insomnia.test('Check if exception message specifies the correct
                name', () => {  
                		insomnia.expect(body).to.be.an('object').that.has.all.keys('message');
                		insomnia.expect(body.message).to.include(mapName);
                });
            settings:
              renderRequestBody: true
              encodeUrl: true
              followRedirects: global
              cookies:
                send: true
                store: true
              rebuildPath: true
          - url: http://{{_['api-host']}}:{{_['port']}}/api/maps/{{ _.map_id }}
            name: Update - Bad Request (400)
            meta:
              id: req_2e5b6643a5864b4b9c8a68b841974f26
              created: 1749180500209
              modified: 1749184060210
              isPrivate: false
              description: ""
              sortKey: -1745644256255
            method: PUT
            scripts:
              preRequest: >-
                // set body to empty string

                insomnia.request.addHeader({key: 'Content-Type', value:
                'application/json' });

                insomnia.request.body.update({
                		mode: 'raw',
                		raw: "",
                });


                // get admin credentials

                const adminEmail = insomnia.environment.get("admin_email");

                const adminPassword =
                insomnia.environment.get("admin_password");


                // update authorization header

                insomnia.request.auth.update(
                		{
                				type: 'basic',
                				basic: [
                						{key: 'username', value: adminEmail},
                						{key: 'password', value: adminPassword},
                				],
                		},
                		'basic'
                )
              afterResponse: |-
                // 400
                insomnia.test('Check if status is 400', () => {
                    insomnia.expect(insomnia.response.code).to.eql(400);
                });
            settings:
              renderRequestBody: true
              encodeUrl: true
              followRedirects: global
              cookies:
                send: true
                store: true
              rebuildPath: true
          - url: http://{{_['api-host']}}:{{_['port']}}/api/maps/{{ _.map_id }}
            name: Update - Unauthorized (401)
            meta:
              id: req_beaa11bc0a214158b030c560e92f4bc7
              created: 1749180509908
              modified: 1749184170694
              isPrivate: false
              description: ""
              sortKey: -1745644256230
            method: PUT
            scripts:
              preRequest: >-
                // get the parent-folder

                const mapFolder = insomnia.parentFolders.get('map');

                if (mapFolder === undefined) {
                	throw Error('mapFolder not found');
                }


                // create the new map as an object from env values

                const map = {
                		name: mapFolder.environment.get("map_name"),
                		columns: mapFolder.environment.get("map_columns"),
                		rows: mapFolder.environment.get("map_rows"),
                };


                // add the robotCommand to the body as JSON and set header

                insomnia.request.addHeader({key: 'Content-Type', value:
                'application/json' });

                insomnia.request.body.update({
                		mode: 'raw',
                		raw: JSON.stringify(map),
                });


                // no auth provided
              afterResponse: |-
                // 401
                insomnia.test('Check if status is 401', () => {
                    insomnia.expect(insomnia.response.code).to.eql(401);
                });
            settings:
              renderRequestBody: true
              encodeUrl: true
              followRedirects: global
              cookies:
                send: true
                store: true
              rebuildPath: true
          - url: http://{{_['api-host']}}:{{_['port']}}/api/maps/{{ _.map_id }}
            name: Update - Forbidden (403)
            meta:
              id: req_5c45f2ae38a74fefaa8fec8d657b66cc
              created: 1749180517366
              modified: 1749184162391
              isPrivate: false
              description: ""
              sortKey: -1745644256217.5
            method: PUT
            scripts:
              preRequest: >-
                // get the parent-folder

                const mapFolder = insomnia.parentFolders.get('map');

                if (mapFolder === undefined) {
                		throw Error('mapFolder not found');
                }


                // create the new map as an object from env values

                const map = {
                		name: mapFolder.environment.get("map_name"),
                		columns: mapFolder.environment.get("map_columns"),
                		rows: mapFolder.environment.get("map_rows"),
                };


                // add the robotCommand to the body as JSON and set header

                insomnia.request.addHeader({key: 'Content-Type', value:
                'application/json' });

                insomnia.request.body.update({
                		mode: 'raw',
                		raw: JSON.stringify(map),
                });


                // set auth as user

                // get user credentials

                const userEmail = insomnia.environment.get("user_email");

                const userPassword = insomnia.environment.get("user_password");


                // update authorization header

                insomnia.request.auth.update(
                		{
                				type: 'basic',
                				basic: [
                						{key: 'username', value: userEmail},
                						{key: 'password', value: userPassword},
                				],
                		},
                		'basic'
                )
              afterResponse: |-
                // 403
                insomnia.test('Check if status is 403', () => {
                    insomnia.expect(insomnia.response.code).to.eql(403);
                });
            settings:
              renderRequestBody: true
              encodeUrl: true
              followRedirects: global
              cookies:
                send: true
                store: true
              rebuildPath: true
          - url: http://{{_['api-host']}}:{{_['port']}}/api/maps/0
            name: Update - Not Found (404)
            meta:
              id: req_fe680a73beeb4703b47e016fbf6547ef
              created: 1749180526427
              modified: 1749184233149
              isPrivate: false
              description: ""
              sortKey: -1745644256211.25
            method: PUT
            scripts:
              preRequest: >-
                // get the parent-folder

                const mapFolder = insomnia.parentFolders.get('map');

                if (mapFolder === undefined) {
                		throw Error('mapFolder not found');
                }


                // create the new map as an object from env values

                const map = {
                		name: mapFolder.environment.get("map_name") + " ",
                		columns: mapFolder.environment.get("map_columns"),
                		rows: mapFolder.environment.get("map_rows"),
                };


                // add the robotCommand to the body as JSON and set header

                insomnia.request.addHeader({key: 'Content-Type', value:
                'application/json' });

                insomnia.request.body.update({
                		mode: 'raw',
                		raw: JSON.stringify(map),
                });


                // set auth as admin

                // get admin credentials

                const adminEmail = insomnia.environment.get("admin_email");

                const adminPassword =
                insomnia.environment.get("admin_password");


                // update authorization header

                insomnia.request.auth.update(
                		{
                				type: 'basic',
                				basic: [
                						{key: 'username', value: adminEmail},
                						{key: 'password', value: adminPassword},
                				],
                		},
                		'basic'
                )
              afterResponse: |-
                insomnia.test('Check if status is 404', () => {
                    insomnia.expect(insomnia.response.code).to.eql(404);
                });
            settings:
              renderRequestBody: true
              encodeUrl: true
              followRedirects: global
              cookies:
                send: true
                store: true
              rebuildPath: true
          - url: http://{{_['api-host']}}:{{_['port']}}/api/maps/17
            name: Update - Conflict (409)
            meta:
              id: req_aa5776a6d511452a8d6cb7304439008b
              created: 1749180540227
              modified: 1749184541455
              isPrivate: false
              description: ""
              sortKey: -1745644256208.125
            method: PUT
            scripts:
              preRequest: >-
                // get admin credentials

                const adminEmail = insomnia.environment.get("admin_email");

                const adminPassword =
                insomnia.environment.get("admin_password");


                // update authorization header

                insomnia.request.auth.update(
                		{
                				type: 'basic',
                				basic: [
                						{key: 'username', value: adminEmail},
                						{key: 'password', value: adminPassword},
                				],
                		},
                		'basic'
                )


                // get the parent-folder

                const mapFolder = insomnia.parentFolders.get('map');

                if (mapFolder === undefined) {
                		throw Error('mapFolder not found');
                }


                // create the new map as an object with the secondary name

                const map = {
                		name: mapFolder.environment.get("map_name_secondary"),
                		columns: mapFolder.environment.get("map_columns"),
                		rows: mapFolder.environment.get("map_rows"),
                };


                // add the robotCommand to the body as JSON and set header

                insomnia.request.addHeader({key: 'Content-Type', value:
                'application/json' });

                insomnia.request.body.update({
                		mode: 'raw',
                		raw: JSON.stringify(map),
                });
              afterResponse: >-
                // 409

                insomnia.test('Check if status is 409', () => {
                    insomnia.expect(insomnia.response.code).to.eql(409);
                });


                // get the parent-folder

                const mapFolder = insomnia.parentFolders.get('map');

                if (mapFolder === undefined) {
                	throw Error('mapFolder not found');
                }


                const body = insomnia.response.json();


                const mapName = mapFolder.environment.get("map_name_secondary")


                insomnia.test('Check if exception message specifies the correct
                name', () => {  
                		insomnia.expect(body).to.be.an('object').that.has.all.keys('message');
                		insomnia.expect(body.message).to.include(mapName);
                });
            settings:
              renderRequestBody: true
              encodeUrl: true
              followRedirects: global
              cookies:
                send: true
                store: true
              rebuildPath: true
          - url: http://{{_['api-host']}}:{{_['port']}}/api/maps/{{ _.map_id }}
            name: Modify - Bad Request (400)
            meta:
              id: req_dc9368ed1b904f60ab81eae583c1f0bb
              created: 1749180572718
              modified: 1749184901907
              isPrivate: false
              description: ""
              sortKey: -1745644256055
            method: PATCH
            headers:
              - name: User-Agent
                value: insomnia/11.0.2
            scripts:
              preRequest: >-
                // set body to empty string

                insomnia.request.addHeader({key: 'Content-Type', value:
                'application/json' });

                insomnia.request.body.update({
                		mode: 'raw',
                		raw: "",
                });


                // get admin credentials

                const adminEmail = insomnia.environment.get("admin_email");

                const adminPassword =
                insomnia.environment.get("admin_password");


                // update authorization header

                insomnia.request.auth.update(
                		{
                				type: 'basic',
                				basic: [
                						{key: 'username', value: adminEmail},
                						{key: 'password', value: adminPassword},
                				],
                		},
                		'basic'
                )
              afterResponse: |-
                // 400
                insomnia.test('Check if status is 400', () => {
                    insomnia.expect(insomnia.response.code).to.eql(400);
                });
            settings:
              renderRequestBody: true
              encodeUrl: true
              followRedirects: global
              cookies:
                send: true
                store: true
              rebuildPath: true
          - url: http://{{_['api-host']}}:{{_['port']}}/api/maps/{{ _.map_id }}
            name: Modify - Unauthorized (401)
            meta:
              id: req_0b61ef59317f4d0a93c89c17cd171618
              created: 1749180586398
              modified: 1749185016594
              isPrivate: false
              description: ""
              sortKey: -1745644255980
            method: PATCH
            headers:
              - name: User-Agent
                value: insomnia/11.0.2
            scripts:
              afterResponse: |-
                // 401
                insomnia.test('Check if status is 401', () => {
                    insomnia.expect(insomnia.response.code).to.eql(401);
                });
            settings:
              renderRequestBody: true
              encodeUrl: true
              followRedirects: global
              cookies:
                send: true
                store: true
              rebuildPath: true
          - url: http://{{_['api-host']}}:{{_['port']}}/api/maps/{{ _.map_id }}
            name: Modify - Forbidden (403)
            meta:
              id: req_86980ce0bbc64f8fa8dd7da64c06b62c
              created: 1749180593167
              modified: 1749185008816
              isPrivate: false
              description: ""
              sortKey: -1745644255942.5
            method: PATCH
            headers:
              - name: User-Agent
                value: insomnia/11.0.2
            scripts:
              preRequest: >-
                // get the parent-folder

                const mapFolder = insomnia.parentFolders.get('map');

                if (mapFolder === undefined) {
                		throw Error('mapFolder not found');
                }


                // create the new map as an object from env values

                const map = {
                		name: mapFolder.environment.get("map_name"),
                		columns: mapFolder.environment.get("map_columns"),
                		rows: mapFolder.environment.get("map_rows"),
                };


                // add the robotCommand to the body as JSON and set header

                insomnia.request.addHeader({key: 'Content-Type', value:
                'application/json' });

                insomnia.request.body.update({
                		mode: 'raw',
                		raw: JSON.stringify(map),
                });


                // set auth as user

                // get user credentials

                const userEmail = insomnia.environment.get("user_email");

                const userPassword = insomnia.environment.get("user_password");


                // update authorization header

                insomnia.request.auth.update(
                		{
                				type: 'basic',
                				basic: [
                						{key: 'username', value: userEmail},
                						{key: 'password', value: userPassword},
                				],
                		},
                		'basic'
                )
              afterResponse: |-
                // 403
                insomnia.test('Check if status is 403', () => {
                    insomnia.expect(insomnia.response.code).to.eql(403);
                });
            settings:
              renderRequestBody: true
              encodeUrl: true
              followRedirects: global
              cookies:
                send: true
                store: true
              rebuildPath: true
          - url: http://{{_['api-host']}}:{{_['port']}}/api/maps/0
            name: Modify - Not Found (404)
            meta:
              id: req_a8feafaf3b904a88962ce594d94c7617
              created: 1749180600711
              modified: 1749185095136
              isPrivate: false
              description: ""
              sortKey: -1745644255923.75
            method: PATCH
            headers:
              - name: User-Agent
                value: insomnia/11.0.2
            scripts:
              preRequest: >-
                // get the parent-folder

                const mapFolder = insomnia.parentFolders.get('map');

                if (mapFolder === undefined) {
                		throw Error('mapFolder not found');
                }


                // create the new map as an object from env values

                const map = {
                		name: mapFolder.environment.get("map_name") + " ",
                		columns: mapFolder.environment.get("map_columns"),
                		rows: mapFolder.environment.get("map_rows"),
                };


                // add the robotCommand to the body as JSON and set header

                insomnia.request.addHeader({key: 'Content-Type', value:
                'application/json' });

                insomnia.request.body.update({
                		mode: 'raw',
                		raw: JSON.stringify(map),
                });


                // set auth as admin

                // get admin credentials

                const adminEmail = insomnia.environment.get("admin_email");

                const adminPassword =
                insomnia.environment.get("admin_password");


                // update authorization header

                insomnia.request.auth.update(
                		{
                				type: 'basic',
                				basic: [
                						{key: 'username', value: adminEmail},
                						{key: 'password', value: adminPassword},
                				],
                		},
                		'basic'
                )
              afterResponse: |-
                insomnia.test('Check if status is 404', () => {
                    insomnia.expect(insomnia.response.code).to.eql(404);
                });
            settings:
              renderRequestBody: true
              encodeUrl: true
              followRedirects: global
              cookies:
                send: true
                store: true
              rebuildPath: true
          - url: http://{{_['api-host']}}:{{_['port']}}/api/maps/{{ _.map_id }}
            name: Modify - Conflict (409)
            meta:
              id: req_a3eb315ae94940599d756b9df2ae3e64
              created: 1749180609912
              modified: 1749185229404
              isPrivate: false
              description: ""
              sortKey: -1745644255914.375
            method: PATCH
            headers:
              - name: User-Agent
                value: insomnia/11.0.2
            scripts:
              preRequest: >-
                // get admin credentials

                const adminEmail = insomnia.environment.get("admin_email");

                const adminPassword =
                insomnia.environment.get("admin_password");


                // update authorization header

                insomnia.request.auth.update(
                		{
                				type: 'basic',
                				basic: [
                						{key: 'username', value: adminEmail},
                						{key: 'password', value: adminPassword},
                				],
                		},
                		'basic'
                )


                // get the parent-folder

                const mapFolder = insomnia.parentFolders.get('map');

                if (mapFolder === undefined) {
                		throw Error('mapFolder not found');
                }


                // create the new map as an object with the secondary name

                const map = {
                		name: mapFolder.environment.get("map_name_secondary")
                };


                // add the robotCommand to the body as JSON and set header

                insomnia.request.addHeader({key: 'Content-Type', value:
                'application/json' });

                insomnia.request.body.update({
                		mode: 'raw',
                		raw: JSON.stringify(map),
                });
              afterResponse: >-
                // 409

                insomnia.test('Check if status is 409', () => {
                    insomnia.expect(insomnia.response.code).to.eql(409);
                });


                // get the parent-folder

                const mapFolder = insomnia.parentFolders.get('map');

                if (mapFolder === undefined) {
                	throw Error('mapFolder not found');
                }


                const body = insomnia.response.json();


                const mapName = mapFolder.environment.get("map_name_secondary")


                insomnia.test('Check if exception message specifies the correct
                name', () => {  
                		insomnia.expect(body).to.be.an('object').that.has.all.keys('message');
                		insomnia.expect(body.message).to.include(mapName);
                });
            settings:
              renderRequestBody: true
              encodeUrl: true
              followRedirects: global
              cookies:
                send: true
                store: true
              rebuildPath: true
          - url: http://{{_['api-host']}}:{{_['port']}}/api/maps/{{ _.map_id }}
            name: Delete - Unauthorized (401)
            meta:
              id: req_b3394bd6ad834b2ebe003b18986b967f
              created: 1749180634645
              modified: 1749185262061
              isPrivate: false
              description: ""
              sortKey: -1745644240170.5
            method: DELETE
            scripts:
              preRequest: // no auth provided
              afterResponse: |-
                // 401
                insomnia.test('Check if status is 401', () => {
                    insomnia.expect(insomnia.response.code).to.eql(401);
                });
            settings:
              renderRequestBody: true
              encodeUrl: true
              followRedirects: global
              cookies:
                send: true
                store: true
              rebuildPath: true
          - url: http://{{_['api-host']}}:{{_['port']}}/api/maps/{{ _.map_id }}
            name: Delete - Forbidden (403)
            meta:
              id: req_547bc346624b439aaf26cca252834c15
              created: 1749180641149
              modified: 1749185283594
              isPrivate: false
              description: ""
              sortKey: -1745644232303.25
            method: DELETE
            scripts:
              preRequest: |-
                // get user credentials
                const userEmail = insomnia.environment.get("user_email");
                const userPassword = insomnia.environment.get("user_password");

                // update authorization header
                insomnia.request.auth.update(
                		{
                				type: 'basic',
                				basic: [
                						{key: 'username', value: userEmail},
                						{key: 'password', value: userPassword},
                				],
                		},
                		'basic'
                )
              afterResponse: |-
                // 403
                insomnia.test('Check if status is 403', () => {
                    insomnia.expect(insomnia.response.code).to.eql(403);
                });
            settings:
              renderRequestBody: true
              encodeUrl: true
              followRedirects: global
              cookies:
                send: true
                store: true
              rebuildPath: true
          - url: http://{{_['api-host']}}:{{_['port']}}/api/maps/0
            name: Delete - Not Found (404)
            meta:
              id: req_417d7b6126714ba8ab09e4a9813f2948
              created: 1749180649479
              modified: 1749185299030
              isPrivate: false
              description: ""
              sortKey: -1745644228369.625
            method: DELETE
            scripts:
              preRequest: >-
                // get admin credentials

                const adminEmail = insomnia.environment.get("admin_email");

                const adminPassword =
                insomnia.environment.get("admin_password");


                // update authorization header

                insomnia.request.auth.update(
                		{
                				type: 'basic',
                				basic: [
                						{key: 'username', value: adminEmail},
                						{key: 'password', value: adminPassword},
                				],
                		},
                		'basic'
                )
              afterResponse: |-
                insomnia.test('Check if status is 404', () => {
                    insomnia.expect(insomnia.response.code).to.eql(404);
                });
            settings:
              renderRequestBody: true
              encodeUrl: true
              followRedirects: global
              cookies:
                send: true
                store: true
              rebuildPath: true
          - url: http://{{_['api-host']}}:{{_['port']}}/api/maps/square
            name: Get Square - OK (200)
            meta:
              id: req_a967f69aa49b4be4b78de1f5f5f714c2
              created: 1749182677964
              modified: 1749182790000
              isPrivate: false
              description: ""
              sortKey: -1745644256130
            method: GET
            scripts:
              preRequest: // no auth
              afterResponse: >-
                // TEST: success 200

                insomnia.test('Check if status is 200', () => {
                    insomnia.expect(insomnia.response.code).to.eql(200);
                });


                const body = insomnia.response.json();


                // TEST: if maps are returned

                insomnia.test('Check if returned objects have correct keys', ()
                => {
                		body.forEach(map => {
                				insomnia.expect(map).to.be.an('object').that.has.all.keys('id','name','description','rows','columns','isSquare','createdDate','modifiedDate');
                		});
                });


                // get the parent-folder

                const mapFolder = insomnia.parentFolders.get('map');

                if (mapFolder === undefined) {
                		throw Error('mapFolder not found');
                }


                // create a map from the env variables

                const createdMap = {
                		name: mapFolder.environment.get("map_name"),
                		columns: mapFolder.environment.get("map_columns"),
                		rows: mapFolder.environment.get("map_rows"),
                		id: mapFolder.environment.get("map_id"),
                		createdDate: mapFolder.environment.get("map_created_date"),
                		modifiedDate: mapFolder.environment.get("map_modified_date")
                };


                // TEST: if response includes the created map

                insomnia.test("Check if returned objects include the created
                map", () => {
                		var found = false;
                		body.forEach(map => {
                				if(map.id == createdMap.id) {
                						found = true;
                						insomnia.expect(map.name).to.eql(createdMap.name);
                						insomnia.expect(map.columns).to.eql(createdMap.columns);
                						insomnia.expect(map.rows).to.eql(createdMap.rows);
                				}
                		})
                		insomnia.expect(found).to.eql(true);
                })
            settings:
              renderRequestBody: true
              encodeUrl: true
              followRedirects: global
              cookies:
                send: true
                store: true
              rebuildPath: true
          - url: http://{{_['api-host']}}:{{_['port']}}/api/maps/{{ _.map_id }}/5-10
            name: Get Coordinate (as User) - OK (200)
            meta:
              id: req_63083cc8543a4845a4f1aa34b014e9fb
              created: 1749183100213
              modified: 1749183106673
              isPrivate: false
              description: ""
              sortKey: -1745644256442.5
            method: GET
            scripts:
              preRequest: |-
                // get user credentials
                const userEmail = insomnia.environment.get("user_email");
                const userPassword = insomnia.environment.get("user_password");

                // update authorization header
                insomnia.request.auth.update(
                		{
                				type: 'basic',
                				basic: [
                						{key: 'username', value: userEmail},
                						{key: 'password', value: userPassword},
                				],
                		},
                		'basic'
                )
              afterResponse: |-
                insomnia.test('Check if status is 200', () => {
                    insomnia.expect(insomnia.response.code).to.eql(200);
                });

                const textBody = insomnia.response.text();

                insomnia.test('Check if response is correct value', () => {
                		insomnia.expect(textBody).to.eql("true");
                })
            settings:
              renderRequestBody: true
              encodeUrl: true
              followRedirects: global
              cookies:
                send: true
                store: true
              rebuildPath: true
          - url: http://{{_['api-host']}}:{{_['port']}}/api/maps
            name: Create Secondary - Created (201)
            meta:
              id: req_418b37756aec4d0d8262e276ecba959c
              created: 1749184255780
              modified: 1749184481122
              isPrivate: false
              description: ""
              sortKey: -1745644256209.6875
            method: POST
            scripts:
              preRequest: >-
                // get admin credentials

                const adminEmail = insomnia.environment.get("admin_email");

                const adminPassword =
                insomnia.environment.get("admin_password");


                // update authorization header

                insomnia.request.auth.update(
                		{
                				type: 'basic',
                				basic: [
                						{key: 'username', value: adminEmail},
                						{key: 'password', value: adminPassword},
                				],
                		},
                		'basic'
                )


                // get the parent-folder

                const mapFolder = insomnia.parentFolders.get('map');

                if (mapFolder === undefined) {
                		throw Error('mapFolder not found');
                }


                // create the new map with test values

                const timestamp = Date.now();

                mapFolder.environment.set('map_name_secondary',
                `TEST_NAME_SECONDARY_${timestamp}`);


                // create the new map as an object

                const map = {
                		name: mapFolder.environment.get("map_name_secondary"),
                		columns: mapFolder.environment.get("map_columns"),
                		rows: mapFolder.environment.get("map_rows"),
                };


                // add the robotCommand to the body as JSON and set header

                insomnia.request.addHeader({key: 'Content-Type', value:
                'application/json' });

                insomnia.request.body.update({
                		mode: 'raw',
                		raw: JSON.stringify(map),
                });
              afterResponse: >-
                // get the parent-folder

                const mapFolder = insomnia.parentFolders.get('map');

                if (mapFolder === undefined) {
                	throw Error('mapFolder not found');
                }


                // create a map from the env variables

                const map = {
                	name: mapFolder.environment.get("map_name_secondary")
                };


                // TEST: created 201

                insomnia.test('Check if status is 201', () => {
                    insomnia.expect(insomnia.response.code).to.eql(201);
                });


                if(insomnia.response.code == 201){
                		const body = insomnia.response.json();

                		// TEST: check if the returned object is a valid map
                		insomnia.test('Check if returned object has correct keys and is a valid map', () => {  
                				insomnia.expect(body).to.be.an('object').that.has.all.keys('id','name','description','rows','columns','isSquare','createdDate','modifiedDate');
                		});

                		// TEST: check if the returned object has the correct values
                		insomnia.test('Check if returned map has the correct values', () => {
                				insomnia.expect(body.name).to.eql(map.name);
                		})

                		// not a test - set environment variables
                		mapFolder.environment.set('map_id_secondary', body.id);
                }
            settings:
              renderRequestBody: true
              encodeUrl: true
              followRedirects: global
              cookies:
                send: true
                store: true
              rebuildPath: true
          - url: http://{{_['api-host']}}:{{_['port']}}/api/maps/{{ _.map_id_secondary }}
            name: Delete Secondary - No Content (204)
            meta:
              id: req_abd4b85cd37043b5bb44ea4949066358
              created: 1749184556426
              modified: 1749185341210
              isPrivate: false
              description: ""
              sortKey: -1745644226352.8125
            method: DELETE
            scripts:
              preRequest: >-
                // get admin credentials

                const adminEmail = insomnia.environment.get("admin_email");

                const adminPassword =
                insomnia.environment.get("admin_password");


                // update authorization header

                insomnia.request.auth.update(
                		{
                				type: 'basic',
                				basic: [
                						{key: 'username', value: adminEmail},
                						{key: 'password', value: adminPassword},
                				],
                		},
                		'basic'
                )
              afterResponse: |-
                insomnia.test('Check if status is 204', () => {
                    insomnia.expect(insomnia.response.code).to.eql(204);
                });
            settings:
              renderRequestBody: true
              encodeUrl: true
              followRedirects: global
              cookies:
                send: true
                store: true
              rebuildPath: true
        environment:
          map_name: TEST_NAME_1749185753403_UPDATE
          map_columns: 20
          map_rows: 20
          map_id: 3
          map_created_date: 2025-06-06T04:55:51.396492Z
          map_modified_date: 2025-06-06T04:55:56.07817Z
          map_name_secondary: TEST_NAME_SECONDARY_1749185755130
          map_id_secondary: 4
      - name: user
        meta:
          id: fld_ed6e4c6b26ca4405ac1b5eeedb60d871
          created: 1749044569066
          modified: 1749185768970
          sortKey: -1745455004761.75
          description: ""
        children:
          - url: http://{{_['api-host']}}:{{_['port']}}/api/users
            name: Create - Created (201)
            meta:
              id: req_219546d9e94c43d58d3eaf2fa2a2abc3
              created: 1749044569066
              modified: 1749180461439
              isPrivate: false
              description: ""
              sortKey: -1745644224436
            method: POST
            scripts:
              preRequest: >-
                // get admin credentials

                const adminEmail = insomnia.environment.get("admin_email");

                const adminPassword =
                insomnia.environment.get("admin_password");


                // update authorization header

                insomnia.request.auth.update(
                		{
                				type: 'basic',
                				basic: [
                						{key: 'username', value: adminEmail},
                						{key: 'password', value: adminPassword},
                				],
                		},
                		'basic'
                )


                // get the parent-folder

                const userFolder = insomnia.parentFolders.get('user');

                if (userFolder === undefined) {
                	throw Error('userFolder not found');
                }


                // set variables with test values

                const timestamp = Date.now();

                userFolder.environment.set('user_email',
                `TEST_EMAIL_${timestamp}`);

                userFolder.environment.set('user_first_name',
                `TEST_FIRST_NAME_${timestamp}`);

                userFolder.environment.set('user_last_name',
                `TEST_LAST_NAME_${timestamp}`);

                userFolder.environment.set('user_description',
                `TEST_DESC_${timestamp}`);

                userFolder.environment.set('user_password',
                `TEST_PASS_HASH_${timestamp}`);

                userFolder.environment.set('user_role', "User");


                // create the new user as an object from env variables

                const user = {
                		email: userFolder.environment.get("user_email"),
                		firstName: userFolder.environment.get("user_first_name"),
                		lastName: userFolder.environment.get("user_last_name"),
                		description: userFolder.environment.get("user_description"),
                		passwordHash: userFolder.environment.get("user_password"),
                		role: userFolder.environment.get("user_role"),
                };


                // add the object to the body as JSON and set header

                insomnia.request.addHeader({key: 'Content-Type', value:
                'application/json' });

                insomnia.request.body.update({
                  mode: 'raw',
                  raw: JSON.stringify(user),
                });
              afterResponse: >+
                // get the parent-folder

                const userFolder = insomnia.parentFolders.get('user');

                if (userFolder === undefined) {
                		throw Error('userFolder not found');
                }


                // create the new user as an object from env variables

                const user = {
                		email: userFolder.environment.get("user_email"),
                		firstName: userFolder.environment.get("user_first_name"),
                		lastName: userFolder.environment.get("user_last_name"),
                		description: userFolder.environment.get("user_description"),
                		password: userFolder.environment.get("user_password"),
                		role: userFolder.environment.get("user_role"),
                };


                // TEST: created 201

                insomnia.test('Check if status is 201', () => {
                    insomnia.expect(insomnia.response.code).to.eql(201);
                });


                if(insomnia.response.code == 201){
                		const body = insomnia.response.json();

                		// TEST: check if the returned object is a valid user
                		insomnia.test('Check if returned object has correct keys and is a valid user', () => {  
                				insomnia.expect(body).to.be.an('object').that.has.all.keys('id','passwordHash','email','description','firstName','lastName','role','createdDate','modifiedDate');
                		});

                		// TEST: check if the returned object has the correct values
                		insomnia.test('Check if returned user has the correct values', () => {
                				insomnia.expect(body.email).to.eql(user.email);
                				insomnia.expect(body.firstName).to.eql(user.firstName);
                				insomnia.expect(body.lastName).to.eql(user.lastName);
                				insomnia.expect(body.description).to.eql(user.description);
                				insomnia.expect(body.passwordHash != user.password); // should not be the same, as returned pwd should be hashed
                				insomnia.expect(body.role).to.eql(user.role);
                		})

                		// not a test - set environment variables
                		userFolder.environment.set('user_id', body.id);
                		userFolder.environment.set('user_created_date', body.createdDate);
                		userFolder.environment.set('user_modified_date', body.modifiedDate);
                		userFolder.environment.set('user_password_hash', body.passwordHash);
                }






            settings:
              renderRequestBody: true
              encodeUrl: true
              followRedirects: global
              cookies:
                send: true
                store: true
              rebuildPath: true
          - url: http://{{_['api-host']}}:{{_['port']}}/api/users
            name: Get All - OK (200)
            meta:
              id: req_87e9e7e554204a9f9c3852b310bd771a
              created: 1749044569066
              modified: 1749181762815
              isPrivate: false
              description: ""
              sortKey: -1745644224336
            method: GET
            scripts:
              preRequest: >-
                // get admin credentials

                const adminEmail = insomnia.environment.get("admin_email");

                const adminPassword =
                insomnia.environment.get("admin_password");


                // update authorization header

                insomnia.request.auth.update(
                		{
                				type: 'basic',
                				basic: [
                						{key: 'username', value: adminEmail},
                						{key: 'password', value: adminPassword},
                				],
                		},
                		'basic'
                )
              afterResponse: >-
                // TEST: success 200

                insomnia.test('Check if status is 200', () => {
                    insomnia.expect(insomnia.response.code).to.eql(200);
                });


                const body = insomnia.response.json();


                // TEST: if commands are returned

                insomnia.test('Check if returned objects have correct keys', ()
                => {
                		body.forEach(user => {
                				insomnia.expect(user).to.be.an('object').that.has.all.keys('id','passwordHash','email','description','firstName','lastName','role','createdDate','modifiedDate');
                		});
                });


                // get the parent-folder

                const userFolder = insomnia.parentFolders.get('user');

                if (userFolder === undefined) {
                	throw Error('userFolder not found');
                }


                // create the stored user as an object from env variables

                const storedUser = {
                	email: userFolder.environment.get("user_email"),
                	firstName: userFolder.environment.get("user_first_name"),
                	lastName: userFolder.environment.get("user_last_name"),
                	description: userFolder.environment.get("user_description"),
                	password: userFolder.environment.get("user_password"),
                	role: userFolder.environment.get("user_role"),
                	id: userFolder.environment.get("user_id"),
                	createdDate: userFolder.environment.get("user_created_date"),
                	modifiedDate: userFolder.environment.get("user_modified_date"),
                };


                // TEST: if response includes the created command

                insomnia.test('Check if returned objects include the created
                user', () => {
                	var found = false;
                	body.forEach(user => {
                			if(user.id == storedUser.id) {
                					found = true;
                					insomnia.expect(user.email).to.eql(storedUser.email);
                					insomnia.expect(user.firstName).to.eql(storedUser.firstName);
                					insomnia.expect(user.lastName).to.eql(storedUser.lastName);
                					insomnia.expect(user.description).to.eql(storedUser.description);
                					insomnia.expect(user.role).to.eql(storedUser.role);
                					insomnia.expect(user.createdDate).to.eql(storedUser.createdDate);
                					insomnia.expect(user.modifiedDate).to.eql(storedUser.modifiedDate);
                			}
                	})
                	insomnia.expect(found).to.eql(true);	
                })
            settings:
              renderRequestBody: true
              encodeUrl: true
              followRedirects: global
              cookies:
                send: true
                store: true
              rebuildPath: true
          - url: http://{{_['api-host']}}:{{_['port']}}/api/users/admin
            name: Get All Admin - OK (200)
            meta:
              id: req_b7392e2cf3774d5d8d2991eeba33ef50
              created: 1749044569066
              modified: 1749181768514
              isPrivate: false
              description: ""
              sortKey: -1745644224236
            method: GET
            scripts:
              preRequest: >-
                // get admin credentials

                const adminEmail = insomnia.environment.get("admin_email");

                const adminPassword =
                insomnia.environment.get("admin_password");


                // update authorization header

                insomnia.request.auth.update(
                		{
                				type: 'basic',
                				basic: [
                						{key: 'username', value: adminEmail},
                						{key: 'password', value: adminPassword},
                				],
                		},
                		'basic'
                )
              afterResponse: >-
                // TEST: success 200

                insomnia.test('Check if status is 200', () => {
                    insomnia.expect(insomnia.response.code).to.eql(200);
                });


                const body = insomnia.response.json();


                // TEST: if commands are returned

                insomnia.test('Check if returned objects have correct keys', ()
                => {
                		body.forEach(user => {
                				insomnia.expect(user).to.be.an('object').that.has.all.keys('id','passwordHash','email','description','firstName','lastName','role','createdDate','modifiedDate');
                		});
                });


                // get the parent-folder

                const userFolder = insomnia.parentFolders.get('user');

                if (userFolder === undefined) {
                	throw Error('userFolder not found');
                }


                // create the stored user as an object from env variables

                const storedUser = {
                	email: userFolder.environment.get("user_email"),
                	firstName: userFolder.environment.get("user_first_name"),
                	lastName: userFolder.environment.get("user_last_name"),
                	description: userFolder.environment.get("user_description"),
                	password: userFolder.environment.get("user_password"),
                	role: userFolder.environment.get("user_role"),
                	id: userFolder.environment.get("user_id"),
                	createdDate: userFolder.environment.get("user_created_date"),
                	modifiedDate: userFolder.environment.get("user_modified_date"),
                };


                // TEST: if response doesn't include the created user, as it
                isn't an admin

                insomnia.test("Check if returned objects don't include the
                created user", () => {
                	var found = false;
                	body.forEach(user => {
                		if(user.id == storedUser.id) {
                			found = true;
                		}
                	})
                	insomnia.expect(found).to.eql(false);
                })
            settings:
              renderRequestBody: true
              encodeUrl: true
              followRedirects: global
              cookies:
                send: true
                store: true
              rebuildPath: true
          - url: http://{{_['api-host']}}:{{_['port']}}/api/users/{{ _.user_id }}
            name: Get By Id (as Admin) - OK (200)
            meta:
              id: req_cc7e5abdbcad4f7d9aae659b0467f696
              created: 1749044569066
              modified: 1749181770341
              isPrivate: false
              description: ""
              sortKey: -1745644224136
            method: GET
            scripts:
              preRequest: >-
                // get admin credentials

                const adminEmail = insomnia.environment.get("admin_email");

                const adminPassword =
                insomnia.environment.get("admin_password");


                // update authorization header

                insomnia.request.auth.update(
                		{
                				type: 'basic',
                				basic: [
                						{key: 'username', value: adminEmail},
                						{key: 'password', value: adminPassword},
                				],
                		},
                		'basic'
                )
              afterResponse: >-
                // TEST: success 200

                insomnia.test('Check if status is 200', () => {
                    insomnia.expect(insomnia.response.code).to.eql(200);
                });


                const body = insomnia.response.json();


                // TEST: if commands are returned

                insomnia.test('Check if returned objects have correct keys', ()
                => {
                		insomnia.expect(body).to.be.an('object').that.has.all.keys('id','passwordHash','email','description','firstName','lastName','role','createdDate','modifiedDate');
                });


                // get the parent-folder

                const userFolder = insomnia.parentFolders.get('user');

                if (userFolder === undefined) {
                	throw Error('userFolder not found');
                }


                // create the stored user as an object from env variables

                const storedUser = {
                	email: userFolder.environment.get("user_email"),
                	firstName: userFolder.environment.get("user_first_name"),
                	lastName: userFolder.environment.get("user_last_name"),
                	description: userFolder.environment.get("user_description"),
                	password: userFolder.environment.get("user_password"),
                	role: userFolder.environment.get("user_role"),
                	id: userFolder.environment.get("user_id"),
                	createdDate: userFolder.environment.get("user_created_date"),
                	modifiedDate: userFolder.environment.get("user_modified_date"),
                };


                // TEST: if response includes the created command

                insomnia.test('Check if returned object is the created user', ()
                => {
                		insomnia.expect(body.email).to.eql(storedUser.email);
                		insomnia.expect(body.firstName).to.eql(storedUser.firstName);
                		insomnia.expect(body.lastName).to.eql(storedUser.lastName);
                		insomnia.expect(body.description).to.eql(storedUser.description);
                		insomnia.expect(body.role).to.eql(storedUser.role);
                		insomnia.expect(body.createdDate).to.eql(storedUser.createdDate);
                		insomnia.expect(body.modifiedDate).to.eql(storedUser.modifiedDate);
                })
            settings:
              renderRequestBody: true
              encodeUrl: true
              followRedirects: global
              cookies:
                send: true
                store: true
              rebuildPath: true
          - url: http://{{_['api-host']}}:{{_['port']}}/api/users/{{ _.user_id }}
            name: Modify (as Admin) - OK (200)
            meta:
              id: req_c28a45d01b2642ff9e154699edf5f84c
              created: 1749044569067
              modified: 1749181787621
              isPrivate: false
              description: ""
              sortKey: -1745644223836
            method: PATCH
            headers:
              - name: User-Agent
                value: insomnia/11.0.2
            scripts:
              preRequest: >-
                // get admin credentials

                const adminEmail = insomnia.environment.get("admin_email");

                const adminPassword =
                insomnia.environment.get("admin_password");


                // update authorization header

                insomnia.request.auth.update(
                		{
                				type: 'basic',
                				basic: [
                						{key: 'username', value: adminEmail},
                						{key: 'password', value: adminPassword},
                				],
                		},
                		'basic'
                )


                // get the parent-folder

                const userFolder = insomnia.parentFolders.get('user');

                if (userFolder === undefined) {
                		throw Error('userFolder not found');
                }


                // update the name, desc, and role variables

                const timestamp = Date.now();

                userFolder.environment.set('user_email',
                `TEST_EMAIL_${timestamp}_UPDATE`);

                userFolder.environment.set('user_password',
                `TEST_PASS_HASH_${timestamp}_UPDATE`);


                // create the stored user as an object from env variables

                const user = {
                		email: userFolder.environment.get("user_email"),
                		password: userFolder.environment.get("user_password"),
                };


                // add the robotCommand to the body as JSON and set header

                insomnia.request.addHeader({key: 'Content-Type', value:
                'application/json' });

                insomnia.request.body.update({
                		mode: 'raw',
                		raw: JSON.stringify(user),
                });
              afterResponse: >-
                // get the parent-folder

                const userFolder = insomnia.parentFolders.get('user');

                if (userFolder === undefined) {
                		throw Error('userFolder not found');
                }


                // create the stored user as an object from env variables

                const user = {
                		email: userFolder.environment.get("user_email"),
                		firstName: userFolder.environment.get("user_first_name"),
                		lastName: userFolder.environment.get("user_last_name"),
                		description: userFolder.environment.get("user_description"),
                		password: userFolder.environment.get("user_password"),
                		passwordHash: userFolder.environment.get("user_password_hash"),
                		role: userFolder.environment.get("user_role"),
                		id: userFolder.environment.get("user_id"),
                		createdDate: userFolder.environment.get("user_created_date"),
                		modifiedDate: userFolder.environment.get("user_modified_date"),
                };


                // TEST: 200 status

                insomnia.test('Check if status is 200', () => {
                    insomnia.expect(insomnia.response.code).to.eql(200);
                });


                if(insomnia.response.code == 200){
                		const body = insomnia.response.json();

                		// TEST: check if the returned object is a valid user
                		insomnia.test('Check if returned object has correct keys and is a valid user', () => {  
                				insomnia.expect(body).to.be.an('object').that.has.all.keys('id','passwordHash','email','description','firstName','lastName','role','createdDate','modifiedDate');
                		});
                	
                		// TEST: check if the modified date has changed, and created date has remained the same
                		insomnia.test("Check if the user's modified date has changed and created date has remained the same", () => {
                				insomnia.expect(body.createdDate).to.eql(user.createdDate);
                				insomnia.expect(body.modifiedDate != user.modifiedDate);
                				insomnia.expect(body.modifiedDate != body.createdDate);
                		});

                		// TEST: check if the returned object has the correct values
                		insomnia.test('Check if returned robotCommand has the correct values', () => {
                				insomnia.expect(body.email).to.eql(user.email);
                				insomnia.expect(body.firstName).to.eql(user.firstName);
                				insomnia.expect(body.lastName).to.eql(user.lastName);
                				insomnia.expect(body.description).to.eql(user.description);
                				insomnia.expect(body.role).to.eql(user.role);
                				insomnia.expect(body.passwordHash != user.passwordHash) // hashes should have change
                		})
                	
                		// not a test - set environment variables
                		userFolder.environment.set('user_modified_date', body.modifiedDate);
                		userFolder.environment.set('user_password_hash', body.passwordHash);
                }
            settings:
              renderRequestBody: true
              encodeUrl: true
              followRedirects: global
              cookies:
                send: true
                store: true
              rebuildPath: true
          - url: http://{{_['api-host']}}:{{_['port']}}/api/users/{{ _.user_id }}
            name: Delete - No Content (204)
            meta:
              id: req_ce781a8d8e374fe2b7ec535ded0ac41a
              created: 1749044569067
              modified: 1749179792209
              isPrivate: false
              description: ""
              sortKey: -1745644223694.5938
            method: DELETE
            scripts:
              preRequest: >-
                // get admin credentials

                const adminEmail = insomnia.environment.get("admin_email");

                const adminPassword =
                insomnia.environment.get("admin_password");


                // update authorization header

                insomnia.request.auth.update(
                		{
                				type: 'basic',
                				basic: [
                						{key: 'username', value: adminEmail},
                						{key: 'password', value: adminPassword},
                				],
                		},
                		'basic'
                )
              afterResponse: |-
                insomnia.test('Check if status is 204', () => {
                    insomnia.expect(insomnia.response.code).to.eql(204);
                });
            settings:
              renderRequestBody: true
              encodeUrl: true
              followRedirects: global
              cookies:
                send: true
                store: true
              rebuildPath: true
          - url: http://{{_['api-host']}}:{{_['port']}}/api/users/{{ _.user_id }}
            name: Update (as Admin) - OK (200)
            meta:
              id: req_e6c540a7563c4eb0a8794199e0a9a25b
              created: 1749044569067
              modified: 1749181776746
              isPrivate: false
              description: ""
              sortKey: -1745644223936
            method: PUT
            parameters:
              - id: pair_c0288d514e27477b9c84abe9dcebd85d
                name: ""
                value: ""
                description: ""
                disabled: false
            scripts:
              preRequest: >-
                // get admin credentials

                const adminEmail = insomnia.environment.get("admin_email");

                const adminPassword =
                insomnia.environment.get("admin_password");


                // update authorization header

                insomnia.request.auth.update(
                		{
                				type: 'basic',
                				basic: [
                						{key: 'username', value: adminEmail},
                						{key: 'password', value: adminPassword},
                				],
                		},
                		'basic'
                )


                // get the parent-folder

                const userFolder = insomnia.parentFolders.get('user');

                if (userFolder === undefined) {
                		throw Error('userFolder not found');
                }


                // update the name, desc, and role variables

                const timestamp = Date.now();

                userFolder.environment.set('user_first_name',
                `TEST_FIRST_NAME_${timestamp}_UPDATE`);

                userFolder.environment.set('user_last_name',
                `TEST_LAST_NAME_${timestamp}_UPDATE`);

                userFolder.environment.set('user_description',
                `TEST_DESC_${timestamp}_UPDATE`);

                userFolder.environment.set('user_role', "Admin");


                // create the stored user as an object from env variables

                const user = {
                		firstName: userFolder.environment.get("user_first_name"),
                		lastName: userFolder.environment.get("user_last_name"),
                		description: userFolder.environment.get("user_description"),
                		role: userFolder.environment.get("user_role")
                };


                // add the robotCommand to the body as JSON and set header

                insomnia.request.addHeader({key: 'Content-Type', value:
                'application/json' });

                insomnia.request.body.update({
                		mode: 'raw',
                		raw: JSON.stringify(user),
                });
              afterResponse: >-
                // get the parent-folder

                const userFolder = insomnia.parentFolders.get('user');

                if (userFolder === undefined) {
                		throw Error('userFolder not found');
                }


                // create the stored user as an object from env variables

                const user = {
                		email: userFolder.environment.get("user_email"),
                		firstName: userFolder.environment.get("user_first_name"),
                		lastName: userFolder.environment.get("user_last_name"),
                		description: userFolder.environment.get("user_description"),
                		password: userFolder.environment.get("user_password"),
                		role: userFolder.environment.get("user_role"),
                		id: userFolder.environment.get("user_id"),
                		createdDate: userFolder.environment.get("user_created_date"),
                		modifiedDate: userFolder.environment.get("user_modified_date"),
                };


                // TEST: 200 status

                insomnia.test('Check if status is 200', () => {
                    insomnia.expect(insomnia.response.code).to.eql(200);
                });


                if(insomnia.response.code == 200){
                		const body = insomnia.response.json();

                		// TEST: check if the returned object is a valid user
                		insomnia.test('Check if returned object has correct keys and is a valid user', () => {  
                				insomnia.expect(body).to.be.an('object').that.has.all.keys('id','passwordHash','email','description','firstName','lastName','role','createdDate','modifiedDate');
                		});
                	
                		// TEST: check if the modified date has changed, and created date has remained the same
                		insomnia.test("Check if the user's modified date has changed and created date has remained the same", () => {
                				insomnia.expect(body.createdDate).to.eql(user.createdDate);
                				insomnia.expect(body.modifiedDate != user.modifiedDate);
                				insomnia.expect(body.modifiedDate != body.createdDate);
                		});

                		// TEST: check if the returned object has the correct values
                		insomnia.test('Check if returned robotCommand has the correct values', () => {
                				insomnia.expect(body.id).to.eql(user.id);
                				insomnia.expect(body.email).to.eql(user.email);
                				insomnia.expect(body.firstName).to.eql(user.firstName);
                				insomnia.expect(body.lastName).to.eql(user.lastName);
                				insomnia.expect(body.description).to.eql(user.description);
                				insomnia.expect(body.role).to.eql(user.role);
                		})
                	
                		// not a test - set environment variables
                		userFolder.environment.set('user_modified_date', body.modifiedDate);
                }
            settings:
              renderRequestBody: true
              encodeUrl: true
              followRedirects: global
              cookies:
                send: true
                store: true
              rebuildPath: true
          - url: http://{{_['api-host']}}:{{_['port']}}/api/users/cleanup-test-users
            name: Delete Test - Success (200)
            meta:
              id: req_410df83a8fb64ef38276d354fe50976d
              created: 1749097141240
              modified: 1749183234324
              isPrivate: false
              description: ""
              sortKey: -1745644223575.0625
            method: DELETE
            scripts:
              preRequest: >-
                // get admin credentials

                const adminEmail = insomnia.environment.get("admin_email");

                const adminPassword =
                insomnia.environment.get("admin_password");


                // update authorization header

                insomnia.request.auth.update(
                		{
                				type: 'basic',
                				basic: [
                						{key: 'username', value: adminEmail},
                						{key: 'password', value: adminPassword},
                				],
                		},
                		'basic'
                )


                // retrieve the emails

                const body = {
                	adminEmail: insomnia.environment.get("admin_email"),
                	userEmail: insomnia.environment.get("user_email"),
                	otherEmail: insomnia.environment.get("other_email")
                };


                // add the robotCommand to the body as JSON and set header

                insomnia.request.addHeader({key: 'Content-Type', value:
                'application/json' });

                insomnia.request.body.update({
                  mode: 'raw',
                  raw: JSON.stringify(body),
                });
              afterResponse: |-
                if (insomnia.response.code === 204) {    
                    // clear environment variables
                    insomnia.environment.unset("admin_email");
                    insomnia.environment.unset("admin_password");
                    insomnia.environment.unset("user_email");
                		insomnia.environment.unset("user_password");
                    
                    console.log("🧹 Environment variables cleared");
                } else {
                    console.log("⚠️ Cleanup failed:", insomnia.response.text());
                }
            settings:
              renderRequestBody: true
              encodeUrl: true
              followRedirects: global
              cookies:
                send: true
                store: true
              rebuildPath: true
          - url: http://{{_['api-host']}}:{{_['port']}}/api/users
            name: Get All - Unauthorized (401)
            meta:
              id: req_0ce896f4f620456e98d106676a08f779
              created: 1749171450145
              modified: 1749177549947
              isPrivate: false
              description: ""
              sortKey: -1745644224298.5
            method: GET
            scripts:
              preRequest: // no auth
              afterResponse: |-
                // 401
                insomnia.test('Check if status is 401', () => {
                    insomnia.expect(insomnia.response.code).to.eql(401);
                });
            settings:
              renderRequestBody: true
              encodeUrl: true
              followRedirects: global
              cookies:
                send: true
                store: true
              rebuildPath: true
          - url: http://{{_['api-host']}}:{{_['port']}}/api/users
            name: Get All - Forbidden (403)
            meta:
              id: req_c7bcef66a531428baa370b508a5fec87
              created: 1749171463496
              modified: 1749173800047
              isPrivate: false
              description: ""
              sortKey: -1745644224261
            method: GET
            scripts:
              preRequest: |-
                // set auth as user
                // get user credentials
                const userEmail = insomnia.environment.get("user_email");
                const userPassword = insomnia.environment.get("user_password");

                // update authorization header
                insomnia.request.auth.update(
                		{
                				type: 'basic',
                				basic: [
                						{key: 'username', value: userEmail},
                						{key: 'password', value: userPassword},
                				],
                		},
                		'basic'
                )
              afterResponse: |-
                // 403
                insomnia.test('Check if status is 403', () => {
                    insomnia.expect(insomnia.response.code).to.eql(403);
                });
            settings:
              renderRequestBody: true
              encodeUrl: true
              followRedirects: global
              cookies:
                send: true
                store: true
              rebuildPath: true
          - url: http://{{_['api-host']}}:{{_['port']}}/api/users
            name: Create - Bad Request (400)
            meta:
              id: req_b18d1d36ff094198b3f49fc49c612cbc
              created: 1749171487012
              modified: 1749176081171
              isPrivate: false
              description: ""
              sortKey: -1745644224386
            method: POST
            scripts:
              preRequest: >+
                // set body to empty string

                insomnia.request.addHeader({key: 'Content-Type', value:
                'application/json' });

                insomnia.request.body.update({
                  mode: 'raw',
                  raw: "",
                });


                // get admin credentials

                const adminEmail = insomnia.environment.get("admin_email");

                const adminPassword =
                insomnia.environment.get("admin_password");


                // update authorization header

                insomnia.request.auth.update(
                		{
                				type: 'basic',
                				basic: [
                						{key: 'username', value: adminEmail},
                						{key: 'password', value: adminPassword},
                				],
                		},
                		'basic'
                )




              afterResponse: |-
                // 400
                insomnia.test('Check if status is 400', () => {
                    insomnia.expect(insomnia.response.code).to.eql(400);
                });
            settings:
              renderRequestBody: true
              encodeUrl: true
              followRedirects: global
              cookies:
                send: true
                store: true
              rebuildPath: true
          - url: http://{{_['api-host']}}:{{_['port']}}/api/users
            name: Create - Conflict (409)
            meta:
              id: req_048c5da489254631ba6ab04f4384b101
              created: 1749171509883
              modified: 1749175626706
              isPrivate: false
              description: ""
              sortKey: -1745644224361
            method: POST
            scripts:
              preRequest: >
                // get the parent-folder

                const userFolder = insomnia.parentFolders.get('user');

                if (userFolder === undefined) {
                	throw Error('userFolder not found');
                }


                // create the new user as an object from env variables with the
                same email as the existing user

                const user = {
                	email: userFolder.environment.get("user_email"),
                	firstName: userFolder.environment.get("user_first_name"),
                	lastName: userFolder.environment.get("user_last_name"),
                	description: userFolder.environment.get("user_description"),
                	passwordHash: userFolder.environment.get("user_password"),
                	role: userFolder.environment.get("user_role"),
                };


                insomnia.request.addHeader({key: 'Content-Type', value:
                'application/json' });

                insomnia.request.body.update({
                  mode: 'raw',
                  raw: JSON.stringify(user),
                });


                // login as admin

                // get admin credentials

                const adminEmail = insomnia.environment.get("admin_email");

                const adminPassword =
                insomnia.environment.get("admin_password");


                // update authorization header

                insomnia.request.auth.update(
                		{
                				type: 'basic',
                				basic: [
                						{key: 'username', value: adminEmail},
                						{key: 'password', value: adminPassword},
                				],
                		},
                		'basic'
                )
              afterResponse: >-
                // 409

                insomnia.test('Check if status is 409', () => {
                    insomnia.expect(insomnia.response.code).to.eql(409);
                });


                // get the parent-folder

                const userFolder = insomnia.parentFolders.get('user');

                if (userFolder === undefined) {
                	throw Error('userFolder not found');
                }

                const userEmail = userFolder.environment.get("user_email")

                const body = insomnia.response.json();


                insomnia.test('Check if the error message specifies the correct
                email', () => {  
                		insomnia.expect(body).to.be.an('object').that.has.all.keys('message');
                		insomnia.expect(body.message).to.include(userEmail);
                });
            settings:
              renderRequestBody: true
              encodeUrl: true
              followRedirects: global
              cookies:
                send: true
                store: true
              rebuildPath: true
          - url: http://{{_['api-host']}}:{{_['port']}}/api/users/admin
            name: Get All Admin - Unauthorized (401)
            meta:
              id: req_b9e73b4d7bd349feb10428398a0414d3
              created: 1749171574168
              modified: 1749175150776
              isPrivate: false
              description: ""
              sortKey: -1745644224186
            method: GET
            scripts:
              preRequest: // no auth
              afterResponse: |-
                // 401
                insomnia.test('Check if status is 401', () => {
                    insomnia.expect(insomnia.response.code).to.eql(401);
                });
            settings:
              renderRequestBody: true
              encodeUrl: true
              followRedirects: global
              cookies:
                send: true
                store: true
              rebuildPath: true
          - url: http://{{_['api-host']}}:{{_['port']}}/api/users/admin
            name: Get All Admin - Forbidden (403)
            meta:
              id: req_669ceb9420c641e29229012eb22622aa
              created: 1749171586896
              modified: 1749175168239
              isPrivate: false
              description: ""
              sortKey: -1745644224161
            method: GET
            scripts:
              preRequest: |-
                // set auth as user
                // get user credentials
                const userEmail = insomnia.environment.get("user_email");
                const userPassword = insomnia.environment.get("user_password");

                // update authorization header
                insomnia.request.auth.update(
                		{
                				type: 'basic',
                				basic: [
                						{key: 'username', value: userEmail},
                						{key: 'password', value: userPassword},
                				],
                		},
                		'basic'
                )
              afterResponse: |-
                // 403
                insomnia.test('Check if status is 403', () => {
                    insomnia.expect(insomnia.response.code).to.eql(403);
                });
            settings:
              renderRequestBody: true
              encodeUrl: true
              followRedirects: global
              cookies:
                send: true
                store: true
              rebuildPath: true
          - url: http://{{_['api-host']}}:{{_['port']}}/api/users/{{ _.user_id }}
            name: Get By Id - Unauthorized (401)
            meta:
              id: req_f017f3d0c2f74b9b8b76dd54e1ad94fc
              created: 1749171641860
              modified: 1749175405772
              isPrivate: false
              description: ""
              sortKey: -1745644224111
            method: GET
            scripts:
              preRequest: // no auth
              afterResponse: |-
                // 401
                insomnia.test('Check if status is 401', () => {
                    insomnia.expect(insomnia.response.code).to.eql(401);
                });
            settings:
              renderRequestBody: true
              encodeUrl: true
              followRedirects: global
              cookies:
                send: true
                store: true
              rebuildPath: true
          - url: http://{{_['api-host']}}:{{_['port']}}/api/users/{{ _.user_id }}
            name: Get By Id - Forbidden (403)
            meta:
              id: req_0043da30b934497b9f7ea9174e1065b6
              created: 1749171649428
              modified: 1749175443309
              isPrivate: false
              description: ""
              sortKey: -1745644224098.5
            method: GET
            scripts:
              preRequest: |-
                // get user credentials
                const userEmail = insomnia.environment.get("user_email");
                const userPassword = insomnia.environment.get("user_password");

                // update authorization header
                insomnia.request.auth.update(
                		{
                				type: 'basic',
                				basic: [
                						{key: 'username', value: userEmail},
                						{key: 'password', value: userPassword},
                				],
                		},
                		'basic'
                )
              afterResponse: |-
                // 403
                insomnia.test('Check if status is 403', () => {
                    insomnia.expect(insomnia.response.code).to.eql(403);
                });
            settings:
              renderRequestBody: true
              encodeUrl: true
              followRedirects: global
              cookies:
                send: true
                store: true
              rebuildPath: true
          - url: http://{{_['api-host']}}:{{_['port']}}/api/users/0
            name: Get By Id - Not Found (404)
            meta:
              id: req_79cc6956bb60426f96f84c180b886338
              created: 1749171659937
              modified: 1749175606451
              isPrivate: false
              description: ""
              sortKey: -1745644224092.25
            method: GET
            scripts:
              preRequest: >-
                // send id that doesn't exist


                // get admin credentials

                const adminEmail = insomnia.environment.get("admin_email");

                const adminPassword =
                insomnia.environment.get("admin_password");


                // update authorization header

                insomnia.request.auth.update(
                		{
                				type: 'basic',
                				basic: [
                						{key: 'username', value: adminEmail},
                						{key: 'password', value: adminPassword},
                				],
                		},
                		'basic'
                )
              afterResponse: |-
                insomnia.test('Check if status is 404', () => {
                    insomnia.expect(insomnia.response.code).to.eql(404);
                });
            settings:
              renderRequestBody: true
              encodeUrl: true
              followRedirects: global
              cookies:
                send: true
                store: true
              rebuildPath: true
          - url: http://{{_['api-host']}}:{{_['port']}}/api/users/{{ _.user_id }}
            name: Update - Bad Request (400)
            meta:
              id: req_3454326b272c417798a716cc8fa4f7b0
              created: 1749171737567
              modified: 1749176858943
              isPrivate: false
              description: ""
              sortKey: -1745644223911
            method: PUT
            parameters:
              - id: pair_c0288d514e27477b9c84abe9dcebd85d
                name: ""
                value: ""
                description: ""
                disabled: false
            scripts:
              preRequest: >-
                // set body to empty string

                insomnia.request.addHeader({key: 'Content-Type', value:
                'application/json' });

                insomnia.request.body.update({
                  mode: 'raw',
                  raw: "",
                });


                // get admin credentials

                const adminEmail = insomnia.environment.get("admin_email");

                const adminPassword =
                insomnia.environment.get("admin_password");


                // update authorization header

                insomnia.request.auth.update(
                		{
                				type: 'basic',
                				basic: [
                						{key: 'username', value: adminEmail},
                						{key: 'password', value: adminPassword},
                				],
                		},
                		'basic'
                )
              afterResponse: |-
                // 400
                insomnia.test('Check if status is 400', () => {
                    insomnia.expect(insomnia.response.code).to.eql(400);
                });
            settings:
              renderRequestBody: true
              encodeUrl: true
              followRedirects: global
              cookies:
                send: true
                store: true
              rebuildPath: true
          - url: http://{{_['api-host']}}:{{_['port']}}/api/users/{{ _.user_id }}
            name: Update - Unauthorized (401)
            meta:
              id: req_7e381a1e2bf64721ae6feb57f1a8453a
              created: 1749171750755
              modified: 1749176851052
              isPrivate: false
              description: ""
              sortKey: -1745644223898.5
            method: PUT
            parameters:
              - id: pair_c0288d514e27477b9c84abe9dcebd85d
                name: ""
                value: ""
                description: ""
                disabled: false
            scripts:
              preRequest: // no auth
              afterResponse: |-
                // 401
                insomnia.test('Check if status is 401', () => {
                    insomnia.expect(insomnia.response.code).to.eql(401);
                });
            settings:
              renderRequestBody: true
              encodeUrl: true
              followRedirects: global
              cookies:
                send: true
                store: true
              rebuildPath: true
          - url: http://{{_['api-host']}}:{{_['port']}}/api/users/{{ _.user_id }}
            name: Update - Forbidden (403)
            meta:
              id: req_29e0f3079e144ad391c704ae39ba0fca
              created: 1749171762544
              modified: 1749176841974
              isPrivate: false
              description: ""
              sortKey: -1745644223892.25
            method: PUT
            parameters:
              - id: pair_c0288d514e27477b9c84abe9dcebd85d
                name: ""
                value: ""
                description: ""
                disabled: false
            scripts:
              preRequest: |-
                // set auth as user
                // get user credentials
                const userEmail = insomnia.environment.get("user_email");
                const userPassword = insomnia.environment.get("user_password");

                // update authorization header
                insomnia.request.auth.update(
                		{
                				type: 'basic',
                				basic: [
                						{key: 'username', value: userEmail},
                						{key: 'password', value: userPassword},
                				],
                		},
                		'basic'
                )
              afterResponse: |-
                // 403
                insomnia.test('Check if status is 403', () => {
                    insomnia.expect(insomnia.response.code).to.eql(403);
                });
            settings:
              renderRequestBody: true
              encodeUrl: true
              followRedirects: global
              cookies:
                send: true
                store: true
              rebuildPath: true
          - url: http://{{_['api-host']}}:{{_['port']}}/api/users/0
            name: Update - Not Found (404)
            meta:
              id: req_639afc4e78cc45ffa69e0f74c9685e20
              created: 1749171777603
              modified: 1749176937899
              isPrivate: false
              description: ""
              sortKey: -1745644223889.125
            method: PUT
            parameters:
              - id: pair_c0288d514e27477b9c84abe9dcebd85d
                name: ""
                value: ""
                description: ""
                disabled: false
            scripts:
              preRequest: >-
                // get admin credentials

                const adminEmail = insomnia.environment.get("admin_email");

                const adminPassword =
                insomnia.environment.get("admin_password");


                // update authorization header

                insomnia.request.auth.update(
                		{
                				type: 'basic',
                				basic: [
                						{key: 'username', value: adminEmail},
                						{key: 'password', value: adminPassword},
                				],
                		},
                		'basic'
                )


                // get the parent-folder

                const userFolder = insomnia.parentFolders.get('user');

                if (userFolder === undefined) {
                		throw Error('userFolder not found');
                }


                // create the stored user as an object from env variables

                const user = {
                		firstName: userFolder.environment.get("user_first_name"),
                		lastName: userFolder.environment.get("user_last_name"),
                		description: userFolder.environment.get("user_description"),
                		role: userFolder.environment.get("user_role")
                };


                // add the robotCommand to the body as JSON and set header

                insomnia.request.addHeader({key: 'Content-Type', value:
                'application/json' });

                insomnia.request.body.update({
                		mode: 'raw',
                		raw: JSON.stringify(user),
                });
              afterResponse: |-
                insomnia.test('Check if status is 404', () => {
                    insomnia.expect(insomnia.response.code).to.eql(404);
                });
            settings:
              renderRequestBody: true
              encodeUrl: true
              followRedirects: global
              cookies:
                send: true
                store: true
              rebuildPath: true
          - url: http://{{_['api-host']}}:{{_['port']}}/api/users/{{ _.user_id }}
            name: Delete - Unauthorized (401)
            meta:
              id: req_289489a425b4442b869b450aa3fc2929
              created: 1749171830230
              modified: 1749179705691
              isPrivate: false
              description: ""
              sortKey: -1745644223717.25
            method: DELETE
            scripts:
              preRequest: // no auth
              afterResponse: |-
                // 401
                insomnia.test('Check if status is 401', () => {
                    insomnia.expect(insomnia.response.code).to.eql(401);
                });
            settings:
              renderRequestBody: true
              encodeUrl: true
              followRedirects: global
              cookies:
                send: true
                store: true
              rebuildPath: true
          - url: http://{{_['api-host']}}:{{_['port']}}/api/users/{{ _.user_id }}
            name: Delete - Forbidden (403)
            meta:
              id: req_916256d86d314b9e90071d026b30168b
              created: 1749171842254
              modified: 1749179689520
              isPrivate: false
              description: ""
              sortKey: -1745644223707.875
            method: DELETE
            scripts:
              preRequest: |-
                // set auth as user
                // get user credentials
                const userEmail = insomnia.environment.get("user_email");
                const userPassword = insomnia.environment.get("user_password");

                // update authorization header
                insomnia.request.auth.update(
                		{
                				type: 'basic',
                				basic: [
                						{key: 'username', value: userEmail},
                						{key: 'password', value: userPassword},
                				],
                		},
                		'basic'
                )
              afterResponse: |-
                // 403
                insomnia.test('Check if status is 403', () => {
                    insomnia.expect(insomnia.response.code).to.eql(403);
                });
            settings:
              renderRequestBody: true
              encodeUrl: true
              followRedirects: global
              cookies:
                send: true
                store: true
              rebuildPath: true
          - url: http://{{_['api-host']}}:{{_['port']}}/api/users/0
            name: Delete - Not Found (404)
            meta:
              id: req_2808a30ee1b44b5680ffb744cd68775a
              created: 1749171854922
              modified: 1749179734681
              isPrivate: false
              description: ""
              sortKey: -1745644223703.1875
            method: DELETE
            scripts:
              preRequest: >-
                // get admin credentials

                const adminEmail = insomnia.environment.get("admin_email");

                const adminPassword =
                insomnia.environment.get("admin_password");


                // update authorization header

                insomnia.request.auth.update(
                		{
                				type: 'basic',
                				basic: [
                						{key: 'username', value: adminEmail},
                						{key: 'password', value: adminPassword},
                				],
                		},
                		'basic'
                )
              afterResponse: |-
                insomnia.test('Check if status is 404', () => {
                    insomnia.expect(insomnia.response.code).to.eql(404);
                });
            settings:
              renderRequestBody: true
              encodeUrl: true
              followRedirects: global
              cookies:
                send: true
                store: true
              rebuildPath: true
          - url: http://{{_['api-host']}}:{{_['port']}}/api/users/{{ _.user_id }}
            name: Modify - Bad Request (400)
            meta:
              id: req_6a97c2f30f964b4cb6174b3fbda19cfc
              created: 1749171887014
              modified: 1749178838442
              isPrivate: false
              description: ""
              sortKey: -1745644223811
            method: PATCH
            headers:
              - name: User-Agent
                value: insomnia/11.0.2
            scripts:
              preRequest: >-
                // set body to empty string

                insomnia.request.addHeader({key: 'Content-Type', value:
                'application/json' });

                insomnia.request.body.update({
                  mode: 'raw',
                  raw: "",
                });


                // get admin credentials

                const adminEmail = insomnia.environment.get("admin_email");

                const adminPassword =
                insomnia.environment.get("admin_password");


                // update authorization header

                insomnia.request.auth.update(
                		{
                				type: 'basic',
                				basic: [
                						{key: 'username', value: adminEmail},
                						{key: 'password', value: adminPassword},
                				],
                		},
                		'basic'
                )
              afterResponse: |-
                // 400
                insomnia.test('Check if status is 400', () => {
                    insomnia.expect(insomnia.response.code).to.eql(400);
                });
            settings:
              renderRequestBody: true
              encodeUrl: true
              followRedirects: global
              cookies:
                send: true
                store: true
              rebuildPath: true
          - url: http://{{_['api-host']}}:{{_['port']}}/api/users/{{ _.user_id }}
            name: Modify - Unauthorized (401)
            meta:
              id: req_c27a796cef284368bbd0aa30f9dc629f
              created: 1749171917384
              modified: 1749178879280
              isPrivate: false
              description: ""
              sortKey: -1745644223798.5
            method: PATCH
            headers:
              - name: User-Agent
                value: insomnia/11.0.2
            scripts:
              preRequest: // no auth
              afterResponse: |-
                // 401
                insomnia.test('Check if status is 401', () => {
                    insomnia.expect(insomnia.response.code).to.eql(401);
                });
            settings:
              renderRequestBody: true
              encodeUrl: true
              followRedirects: global
              cookies:
                send: true
                store: true
              rebuildPath: true
          - url: http://{{_['api-host']}}:{{_['port']}}/api/users/{{ _.user_id }}
            name: Modify - Forbidden (403)
            meta:
              id: req_50c26760ef934d4da4e87039afdcfe91
              created: 1749171923969
              modified: 1749178896907
              isPrivate: false
              description: ""
              sortKey: -1745644223792.25
            method: PATCH
            headers:
              - name: User-Agent
                value: insomnia/11.0.2
            scripts:
              preRequest: |-
                // set auth as user
                // get user credentials
                const userEmail = insomnia.environment.get("user_email");
                const userPassword = insomnia.environment.get("user_password");

                // update authorization header
                insomnia.request.auth.update(
                		{
                				type: 'basic',
                				basic: [
                						{key: 'username', value: userEmail},
                						{key: 'password', value: userPassword},
                				],
                		},
                		'basic'
                )
              afterResponse: |-
                // 403
                insomnia.test('Check if status is 403', () => {
                    insomnia.expect(insomnia.response.code).to.eql(403);
                });
            settings:
              renderRequestBody: true
              encodeUrl: true
              followRedirects: global
              cookies:
                send: true
                store: true
              rebuildPath: true
          - url: http://{{_['api-host']}}:{{_['port']}}/api/users/0
            name: Modify - Not Found (404)
            meta:
              id: req_1b55dc82ba76433ba9524e7d623f6675
              created: 1749171938211
              modified: 1749178924937
              isPrivate: false
              description: ""
              sortKey: -1745644223789.125
            method: PATCH
            headers:
              - name: User-Agent
                value: insomnia/11.0.2
            scripts:
              preRequest: >-
                // get admin credentials

                const adminEmail = insomnia.environment.get("admin_email");

                const adminPassword =
                insomnia.environment.get("admin_password");


                // update authorization header

                insomnia.request.auth.update(
                		{
                				type: 'basic',
                				basic: [
                						{key: 'username', value: adminEmail},
                						{key: 'password', value: adminPassword},
                				],
                		},
                		'basic'
                )


                // get the parent-folder

                const userFolder = insomnia.parentFolders.get('user');

                if (userFolder === undefined) {
                		throw Error('userFolder not found');
                }


                // create the stored user as an object from env variables

                const user = {
                		email: userFolder.environment.get("user_email"),
                		password: userFolder.environment.get("user_password"),
                };


                // add the robotCommand to the body as JSON and set header

                insomnia.request.addHeader({key: 'Content-Type', value:
                'application/json' });

                insomnia.request.body.update({
                		mode: 'raw',
                		raw: JSON.stringify(user),
                });
              afterResponse: |-
                insomnia.test('Check if status is 404', () => {
                    insomnia.expect(insomnia.response.code).to.eql(404);
                });
            settings:
              renderRequestBody: true
              encodeUrl: true
              followRedirects: global
              cookies:
                send: true
                store: true
              rebuildPath: true
          - url: http://{{_['api-host']}}:{{_['port']}}/api/users/{{ _.user_id }}
            name: Modify - Conflict (409)
            meta:
              id: req_738b24cfc8b144a894be6d8e57c0d091
              created: 1749171947981
              modified: 1749179526948
              isPrivate: false
              description: ""
              sortKey: -1745644223762.5625
            method: PATCH
            headers:
              - name: User-Agent
                value: insomnia/11.0.2
            scripts:
              preRequest: >-
                // get admin credentials

                const adminEmail = insomnia.environment.get("admin_email");

                const adminPassword =
                insomnia.environment.get("admin_password");


                // update authorization header

                insomnia.request.auth.update(
                		{
                				type: 'basic',
                				basic: [
                						{key: 'username', value: adminEmail},
                						{key: 'password', value: adminPassword},
                				],
                		},
                		'basic'
                )


                // get the parent-folder

                const userFolder = insomnia.parentFolders.get('user');

                if (userFolder === undefined) {
                		throw Error('userFolder not found');
                }


                // create the stored user as an object from env variables

                const user = {
                		email: userFolder.environment.get("user_email_secondary"),
                		password: userFolder.environment.get("user_password"),
                };


                // add the robotCommand to the body as JSON and set header

                insomnia.request.addHeader({key: 'Content-Type', value:
                'application/json' });

                insomnia.request.body.update({
                		mode: 'raw',
                		raw: JSON.stringify(user),
                });
              afterResponse: >-
                // 409

                insomnia.test('Check if status is 409', () => {
                    insomnia.expect(insomnia.response.code).to.eql(409);
                });


                // get the parent-folder

                const userFolder = insomnia.parentFolders.get('user');

                if (userFolder === undefined) {
                	throw Error('userFolder not found');
                }

                const userEmailSecondary =
                userFolder.environment.get("user_email_secondary")

                const body = insomnia.response.json();


                insomnia.test('Check if the error message specifies the correct
                email', () => {  
                		insomnia.expect(body).to.be.an('object').that.has.all.keys('message');
                		insomnia.expect(body.message).to.include(userEmailSecondary);
                });
            settings:
              renderRequestBody: true
              encodeUrl: true
              followRedirects: global
              cookies:
                send: true
                store: true
              rebuildPath: true
          - url: http://{{_['api-host']}}:{{_['port']}}/api/users/cleanup-test-users
            name: Delete Test - Bad Request (400)
            meta:
              id: req_9e150c2157824ad3b3b4cb31f8e08243
              created: 1749172001779
              modified: 1749179850932
              isPrivate: false
              description: ""
              sortKey: -1745644223679.75
            method: DELETE
            scripts:
              preRequest: >-
                // set body to empty string

                insomnia.request.addHeader({key: 'Content-Type', value:
                'application/json' });

                insomnia.request.body.update({
                  mode: 'raw',
                  raw: "",
                });


                // get admin credentials

                const adminEmail = insomnia.environment.get("admin_email");

                const adminPassword =
                insomnia.environment.get("admin_password");


                // update authorization header

                insomnia.request.auth.update(
                		{
                				type: 'basic',
                				basic: [
                						{key: 'username', value: adminEmail},
                						{key: 'password', value: adminPassword},
                				],
                		},
                		'basic'
                )
              afterResponse: |-
                // 400
                insomnia.test('Check if status is 400', () => {
                    insomnia.expect(insomnia.response.code).to.eql(400);
                });
            settings:
              renderRequestBody: true
              encodeUrl: true
              followRedirects: global
              cookies:
                send: true
                store: true
              rebuildPath: true
          - url: http://{{_['api-host']}}:{{_['port']}}/api/users/cleanup-test-users
            name: Delete Test - Unauthorized (401)
            meta:
              id: req_8cac8502328b4c1885fe72ef5063f3d5
              created: 1749172012522
              modified: 1749179871071
              isPrivate: false
              description: ""
              sortKey: -1745644223676.625
            method: DELETE
            scripts:
              preRequest: // no auth
              afterResponse: |-
                // 401
                insomnia.test('Check if status is 401', () => {
                    insomnia.expect(insomnia.response.code).to.eql(401);
                });
            settings:
              renderRequestBody: true
              encodeUrl: true
              followRedirects: global
              cookies:
                send: true
                store: true
              rebuildPath: true
          - url: http://{{_['api-host']}}:{{_['port']}}/api/users/cleanup-test-users
            name: Delete Test - Forbidden (403)
            meta:
              id: req_22a035b620144f53830bb133a36bc09d
              created: 1749172019957
              modified: 1749179886105
              isPrivate: false
              description: ""
              sortKey: -1745644223675.0625
            method: DELETE
            scripts:
              preRequest: |-
                // set auth as user
                // get user credentials
                const userEmail = insomnia.environment.get("user_email");
                const userPassword = insomnia.environment.get("user_password");

                // update authorization header
                insomnia.request.auth.update(
                		{
                				type: 'basic',
                				basic: [
                						{key: 'username', value: userEmail},
                						{key: 'password', value: userPassword},
                				],
                		},
                		'basic'
                )
              afterResponse: |-
                // 403
                insomnia.test('Check if status is 403', () => {
                    insomnia.expect(insomnia.response.code).to.eql(403);
                });
            settings:
              renderRequestBody: true
              encodeUrl: true
              followRedirects: global
              cookies:
                send: true
                store: true
              rebuildPath: true
          - url: http://{{_['api-host']}}:{{_['port']}}/api/users/{{ _.user_id }}
            name: Get By Id (as Self) - OK (200)
            meta:
              id: req_7ab72123bac640e884bcef150b11f58b
              created: 1749176146895
              modified: 1749181773967
              isPrivate: false
              description: ""
              sortKey: -1745644224123.5
            method: GET
            scripts:
              preRequest: >-
                // auth as self

                // get the parent-folder

                const userFolder = insomnia.parentFolders.get('user');

                if (userFolder === undefined) {
                	throw Error('userFolder not found');
                }


                // set the credentials

                const userEmail = userFolder.environment.get("user_email");

                const userPassword =
                userFolder.environment.get("user_password");


                // update authorization header

                insomnia.request.auth.update(
                		{
                				type: 'basic',
                				basic: [
                						{key: 'username', value: userEmail},
                						{key: 'password', value: userPassword},
                				],
                		},
                		'basic'
                )
              afterResponse: >-
                // TEST: success 200

                insomnia.test('Check if status is 200', () => {
                    insomnia.expect(insomnia.response.code).to.eql(200);
                });


                const body = insomnia.response.json();


                // TEST: if commands are returned

                insomnia.test('Check if returned objects have correct keys', ()
                => {
                		insomnia.expect(body).to.be.an('object').that.has.all.keys('id','passwordHash','email','description','firstName','lastName','role','createdDate','modifiedDate');
                });


                // get the parent-folder

                const userFolder = insomnia.parentFolders.get('user');

                if (userFolder === undefined) {
                	throw Error('userFolder not found');
                }


                // create the stored user as an object from env variables

                const storedUser = {
                	email: userFolder.environment.get("user_email"),
                	firstName: userFolder.environment.get("user_first_name"),
                	lastName: userFolder.environment.get("user_last_name"),
                	description: userFolder.environment.get("user_description"),
                	password: userFolder.environment.get("user_password"),
                	role: userFolder.environment.get("user_role"),
                	id: userFolder.environment.get("user_id"),
                	createdDate: userFolder.environment.get("user_created_date"),
                	modifiedDate: userFolder.environment.get("user_modified_date"),
                };


                // TEST: if response includes the created command

                insomnia.test('Check if returned object is the created user', ()
                => {
                		insomnia.expect(body.email).to.eql(storedUser.email);
                		insomnia.expect(body.firstName).to.eql(storedUser.firstName);
                		insomnia.expect(body.lastName).to.eql(storedUser.lastName);
                		insomnia.expect(body.description).to.eql(storedUser.description);
                		insomnia.expect(body.role).to.eql(storedUser.role);
                		insomnia.expect(body.createdDate).to.eql(storedUser.createdDate);
                		insomnia.expect(body.modifiedDate).to.eql(storedUser.modifiedDate);
                })
            settings:
              renderRequestBody: true
              encodeUrl: true
              followRedirects: global
              cookies:
                send: true
                store: true
              rebuildPath: true
          - url: http://{{_['api-host']}}:{{_['port']}}/api/users/{{ _.user_id }}
            name: Update (as Self) - OK (200)
            meta:
              id: req_84fc31237ba143d4a8c2601420f72104
              created: 1749176282090
              modified: 1749181785565
              isPrivate: false
              description: ""
              sortKey: -1745644223923.5
            method: PUT
            parameters:
              - id: pair_c0288d514e27477b9c84abe9dcebd85d
                name: ""
                value: ""
                description: ""
                disabled: false
            scripts:
              preRequest: >-
                // auth as self

                // get the parent-folder

                const userFolder = insomnia.parentFolders.get('user');

                if (userFolder === undefined) {
                	throw Error('userFolder not found');
                }


                // set the credentials

                const userEmail = userFolder.environment.get("user_email");

                const userPassword =
                userFolder.environment.get("user_password");


                // update authorization header

                insomnia.request.auth.update(
                		{
                				type: 'basic',
                				basic: [
                						{key: 'username', value: userEmail},
                						{key: 'password', value: userPassword},
                				],
                		},
                		'basic'
                )


                // update the name and desc variables

                const timestamp = Date.now();

                userFolder.environment.set('user_first_name',
                `TEST_FIRST_NAME_${timestamp}_UPDATE`);

                userFolder.environment.set('user_last_name',
                `TEST_LAST_NAME_${timestamp}_UPDATE`);

                userFolder.environment.set('user_description',
                `TEST_DESC_${timestamp}_UPDATE`);

                userFolder.environment.set('user_role', "User");


                // create the stored user as an object from env variables

                const user = {
                	firstName: userFolder.environment.get("user_first_name"),
                	lastName: userFolder.environment.get("user_last_name"),
                	description: userFolder.environment.get("user_description"),
                	role: userFolder.environment.get("user_role")
                };


                // add the robotCommand to the body as JSON and set header

                insomnia.request.addHeader({key: 'Content-Type', value:
                'application/json' });

                insomnia.request.body.update({
                  mode: 'raw',
                  raw: JSON.stringify(user),
                });
              afterResponse: >-
                // get the parent-folder

                const userFolder = insomnia.parentFolders.get('user');

                if (userFolder === undefined) {
                		throw Error('userFolder not found');
                }


                // create the stored user as an object from env variables

                const user = {
                		email: userFolder.environment.get("user_email"),
                		firstName: userFolder.environment.get("user_first_name"),
                		lastName: userFolder.environment.get("user_last_name"),
                		description: userFolder.environment.get("user_description"),
                		password: userFolder.environment.get("user_password"),
                		role: userFolder.environment.get("user_role"),
                		id: userFolder.environment.get("user_id"),
                		createdDate: userFolder.environment.get("user_created_date"),
                		modifiedDate: userFolder.environment.get("user_modified_date"),
                };


                // TEST: 200 status

                insomnia.test('Check if status is 200', () => {
                    insomnia.expect(insomnia.response.code).to.eql(200);
                });


                if(insomnia.response.code == 200){
                		const body = insomnia.response.json();

                		// TEST: check if the returned object is a valid user
                		insomnia.test('Check if returned object has correct keys and is a valid user', () => {  
                				insomnia.expect(body).to.be.an('object').that.has.all.keys('id','passwordHash','email','description','firstName','lastName','role','createdDate','modifiedDate');
                		});
                	
                		// TEST: check if the modified date has changed, and created date has remained the same
                		insomnia.test("Check if the user's modified date has changed and created date has remained the same", () => {
                				insomnia.expect(body.createdDate).to.eql(user.createdDate);
                				insomnia.expect(body.modifiedDate != user.modifiedDate);
                				insomnia.expect(body.modifiedDate != body.createdDate);
                		});

                		// TEST: check if the returned object has the correct values
                		insomnia.test('Check if returned robotCommand has the correct values', () => {
                				insomnia.expect(body.id).to.eql(user.id);
                				insomnia.expect(body.email).to.eql(user.email);
                				insomnia.expect(body.firstName).to.eql(user.firstName);
                				insomnia.expect(body.lastName).to.eql(user.lastName);
                				insomnia.expect(body.description).to.eql(user.description);
                				insomnia.expect(body.role).to.eql(user.role);
                		})
                	
                		// not a test - set environment variables
                		userFolder.environment.set('user_modified_date', body.modifiedDate);
                }
            settings:
              renderRequestBody: true
              encodeUrl: true
              followRedirects: global
              cookies:
                send: true
                store: true
              rebuildPath: true
          - url: http://{{_['api-host']}}:{{_['port']}}/api/users/admin
            name: Get All Admin - OK (200)
            meta:
              id: req_f93d9d16784d4de69ad7d320e871e1bd
              created: 1749176372687
              modified: 1749181779661
              isPrivate: false
              description: ""
              sortKey: -1745644223929.75
            method: GET
            scripts:
              preRequest: >-
                // get admin credentials

                const adminEmail = insomnia.environment.get("admin_email");

                const adminPassword =
                insomnia.environment.get("admin_password");


                // update authorization header

                insomnia.request.auth.update(
                		{
                				type: 'basic',
                				basic: [
                						{key: 'username', value: adminEmail},
                						{key: 'password', value: adminPassword},
                				],
                		},
                		'basic'
                )
              afterResponse: >-
                // TEST: success 200

                insomnia.test('Check if status is 200', () => {
                    insomnia.expect(insomnia.response.code).to.eql(200);
                });


                const body = insomnia.response.json();


                // TEST: if commands are returned

                insomnia.test('Check if returned objects have correct keys', ()
                => {
                		body.forEach(user => {
                				insomnia.expect(user).to.be.an('object').that.has.all.keys('id','passwordHash','email','description','firstName','lastName','role','createdDate','modifiedDate');
                		});
                });


                // get the parent-folder

                const userFolder = insomnia.parentFolders.get('user');

                if (userFolder === undefined) {
                		throw Error('userFolder not found');
                }


                // create the stored user as an object from env variables

                const storedUser = {
                		email: userFolder.environment.get("user_email"),
                		firstName: userFolder.environment.get("user_first_name"),
                		lastName: userFolder.environment.get("user_last_name"),
                		description: userFolder.environment.get("user_description"),
                		password: userFolder.environment.get("user_password"),
                		role: userFolder.environment.get("user_role"),
                		id: userFolder.environment.get("user_id"),
                		createdDate: userFolder.environment.get("user_created_date"),
                		modifiedDate: userFolder.environment.get("user_modified_date"),
                };


                // TEST: if response includes the created command

                insomnia.test('Check if returned objects include the created
                user', () => {
                	var found = false;
                	body.forEach(user => {
                			if(user.id == storedUser.id) {
                					found = true;
                					insomnia.expect(user.email).to.eql(storedUser.email);
                					insomnia.expect(user.firstName).to.eql(storedUser.firstName);
                					insomnia.expect(user.lastName).to.eql(storedUser.lastName);
                					insomnia.expect(user.description).to.eql(storedUser.description);
                					insomnia.expect(user.role).to.eql(storedUser.role);
                					insomnia.expect(user.createdDate).to.eql(storedUser.createdDate);
                					insomnia.expect(user.modifiedDate).to.eql(storedUser.modifiedDate);
                			}
                	})
                	insomnia.expect(found).to.eql(true);	
                })
            settings:
              renderRequestBody: true
              encodeUrl: true
              followRedirects: global
              cookies:
                send: true
                store: true
              rebuildPath: true
          - url: http://{{_['api-host']}}:{{_['port']}}/api/users/{{ _.user_id }}
            name: Modify (as Self) - OK (200)
            meta:
              id: req_f57417ed034240cbac48c3793415ea5e
              created: 1749177073863
              modified: 1749181799904
              isPrivate: false
              description: ""
              sortKey: -1745644223823.5
            method: PATCH
            headers:
              - name: User-Agent
                value: insomnia/11.0.2
            scripts:
              preRequest: >-
                // auth as self

                // get the parent-folder

                const userFolder = insomnia.parentFolders.get('user');

                if (userFolder === undefined) {
                	throw Error('userFolder not found');
                }


                // set the credentials

                const userEmail = userFolder.environment.get("user_email");

                const userPassword =
                userFolder.environment.get("user_password");


                // update authorization header

                insomnia.request.auth.update(
                		{
                				type: 'basic',
                				basic: [
                						{key: 'username', value: userEmail},
                						{key: 'password', value: userPassword},
                				],
                		},
                		'basic'
                )


                console.log(`email: ${userEmail}, password: ${userPassword}`);


                // update the name, desc, and role variables

                const timestamp = Date.now();

                userFolder.environment.set('user_email',
                `TEST_EMAIL_${timestamp}_UPDATE`);

                userFolder.environment.set('user_password',
                `TEST_PASS_HASH_${timestamp}_UPDATE`);


                // create the stored user as an object from env variables

                const user = {
                		email: userFolder.environment.get("user_email"),
                		password: userFolder.environment.get("user_password"),
                };


                // add the robotCommand to the body as JSON and set header

                insomnia.request.addHeader({key: 'Content-Type', value:
                'application/json' });

                insomnia.request.body.update({
                		mode: 'raw',
                		raw: JSON.stringify(user),
                });
              afterResponse: >-
                // get the parent-folder

                const userFolder = insomnia.parentFolders.get('user');

                if (userFolder === undefined) {
                		throw Error('userFolder not found');
                }


                // create the stored user as an object from env variables

                const user = {
                		email: userFolder.environment.get("user_email"),
                		firstName: userFolder.environment.get("user_first_name"),
                		lastName: userFolder.environment.get("user_last_name"),
                		description: userFolder.environment.get("user_description"),
                		password: userFolder.environment.get("user_password"),
                		passwordHash: userFolder.environment.get("user_password_hash"),
                		role: userFolder.environment.get("user_role"),
                		id: userFolder.environment.get("user_id"),
                		createdDate: userFolder.environment.get("user_created_date"),
                		modifiedDate: userFolder.environment.get("user_modified_date"),
                };


                // TEST: 200 status

                insomnia.test('Check if status is 200', () => {
                    insomnia.expect(insomnia.response.code).to.eql(200);
                });


                if(insomnia.response.code == 200){
                		const body = insomnia.response.json();

                		// TEST: check if the returned object is a valid user
                		insomnia.test('Check if returned object has correct keys and is a valid user', () => {  
                				insomnia.expect(body).to.be.an('object').that.has.all.keys('id','passwordHash','email','description','firstName','lastName','role','createdDate','modifiedDate');
                		});
                	
                		// TEST: check if the modified date has changed, and created date has remained the same
                		insomnia.test("Check if the user's modified date has changed and created date has remained the same", () => {
                				insomnia.expect(body.createdDate).to.eql(user.createdDate);
                				insomnia.expect(body.modifiedDate != user.modifiedDate);
                				insomnia.expect(body.modifiedDate != body.createdDate);
                		});

                		// TEST: check if the returned object has the correct values
                		insomnia.test('Check if returned robotCommand has the correct values', () => {
                				insomnia.expect(body.id).to.eql(user.id);
                				insomnia.expect(body.email).to.eql(user.email);
                				insomnia.expect(body.firstName).to.eql(user.firstName);
                				insomnia.expect(body.lastName).to.eql(user.lastName);
                				insomnia.expect(body.description).to.eql(user.description);
                				insomnia.expect(body.role).to.eql(user.role);
                				insomnia.expect(body.passwordHash != user.passwordHash) // hashes should have change
                		})
                	
                		// not a test - set environment variables
                		userFolder.environment.set('user_modified_date', body.modifiedDate);
                		userFolder.environment.set('user_password_hash', body.passwordHash);
                }
            settings:
              renderRequestBody: true
              encodeUrl: true
              followRedirects: global
              cookies:
                send: true
                store: true
              rebuildPath: true
          - url: http://{{_['api-host']}}:{{_['port']}}/api/users
            name: Create Secondary - Created (201)
            meta:
              id: req_cc74504d76a3418a8e177771edaadc19
              created: 1749179061651
              modified: 1749180467748
              isPrivate: false
              description: ""
              sortKey: -1745644223775.8438
            method: POST
            scripts:
              preRequest: >-
                // get admin credentials

                const adminEmail = insomnia.environment.get("admin_email");

                const adminPassword =
                insomnia.environment.get("admin_password");


                // update authorization header

                insomnia.request.auth.update(
                		{
                				type: 'basic',
                				basic: [
                						{key: 'username', value: adminEmail},
                						{key: 'password', value: adminPassword},
                				],
                		},
                		'basic'
                )


                // get the parent-folder

                const userFolder = insomnia.parentFolders.get('user');

                if (userFolder === undefined) {
                	throw Error('userFolder not found');
                }


                // set variables with test values

                const timestamp = Date.now();

                userFolder.environment.set('user_email_secondary',
                `TEST_EMAIL_${timestamp}`);


                // create the new user as an object from env variables

                const user = {
                		email: userFolder.environment.get("user_email_secondary"),
                		firstName: userFolder.environment.get("user_first_name"),
                		lastName: userFolder.environment.get("user_last_name"),
                		description: userFolder.environment.get("user_description"),
                		passwordHash: userFolder.environment.get("user_password"),
                		role: userFolder.environment.get("user_role"),
                };


                // add the object to the body as JSON and set header

                insomnia.request.addHeader({key: 'Content-Type', value:
                'application/json' });

                insomnia.request.body.update({
                  mode: 'raw',
                  raw: JSON.stringify(user),
                });
              afterResponse: >+
                // get the parent-folder

                const userFolder = insomnia.parentFolders.get('user');

                if (userFolder === undefined) {
                		throw Error('userFolder not found');
                }


                // create the new user as an object from env variables

                const user = {
                		email: userFolder.environment.get("user_email"),
                		firstName: userFolder.environment.get("user_first_name"),
                		lastName: userFolder.environment.get("user_last_name"),
                		description: userFolder.environment.get("user_description"),
                		password: userFolder.environment.get("user_password"),
                		role: userFolder.environment.get("user_role"),
                };


                // TEST: created 201

                insomnia.test('Check if status is 201', () => {
                    insomnia.expect(insomnia.response.code).to.eql(201);
                });


                if(insomnia.response.code == 201){
                		const body = insomnia.response.json();

                		// TEST: check if the returned object is a valid user
                		insomnia.test('Check if returned object has correct keys and is a valid user', () => {  
                				insomnia.expect(body).to.be.an('object').that.has.all.keys('id','passwordHash','email','description','firstName','lastName','role','createdDate','modifiedDate');
                		});
                	
                		const userEmailSecondary = userFolder.environment.get("user_email_secondary")

                		// TEST: check if the returned object has the correct values
                		insomnia.test('Check if returned user has the correct values', () => {
                				insomnia.expect(body.email).to.eql(userEmailSecondary);
                		})

                		// not a test - set environment variables
                		userFolder.environment.set('user_id_secondary', body.id);
                }






            settings:
              renderRequestBody: true
              encodeUrl: true
              followRedirects: global
              cookies:
                send: true
                store: true
              rebuildPath: true
          - url: http://{{_['api-host']}}:{{_['port']}}/api/users/{{ _.user_id_secondary }}
            name: Delete Secondary - No Content (204)
            meta:
              id: req_f4622ad785ce4928a667d33ab7c32a4e
              created: 1749179544227
              modified: 1749184599843
              isPrivate: false
              description: ""
              sortKey: -1745644223733.2656
            method: DELETE
            scripts:
              preRequest: >-
                // get admin credentials

                const adminEmail = insomnia.environment.get("admin_email");

                const adminPassword =
                insomnia.environment.get("admin_password");


                // update authorization header

                insomnia.request.auth.update(
                		{
                				type: 'basic',
                				basic: [
                						{key: 'username', value: adminEmail},
                						{key: 'password', value: adminPassword},
                				],
                		},
                		'basic'
                )
              afterResponse: |-
                insomnia.test('Check if status is 204', () => {
                    insomnia.expect(insomnia.response.code).to.eql(204);
                });
            settings:
              renderRequestBody: true
              encodeUrl: true
              followRedirects: global
              cookies:
                send: true
                store: true
              rebuildPath: true
        environment:
          user_email: TEST_EMAIL_1749185764488_UPDATE
          user_first_name: TEST_FIRST_NAME_1749185762600_UPDATE
          user_last_name: TEST_LAST_NAME_1749185762600_UPDATE
          user_description: TEST_DESC_1749185762600_UPDATE
          user_password: TEST_PASS_HASH_1749185764488_UPDATE
          user_role: User
          user_id: 7
          user_created_date: 2025-06-06T04:55:59.3115Z
          user_modified_date: 2025-06-06T04:56:05.07084Z
          user_password_hash: $argon2id$v=19$m=65536,t=3,p=1$B2OUOUkfLpH3X6Wo/8GRug$mKWT+qgWcAV4M7+NxrlPLBbEBWvqdPo0R6UZ5aimsHI
          user_email_secondary: TEST_EMAIL_1749185766049
          user_id_secondary: 8
    scripts:
      afterResponse: >+
        // basic response validation

        const response = insomnia.response;


        // check response time

        insomnia.test("Response time is acceptable", () => {
        	insomnia.expect(response.responseTime).to.be.below(10000);
        });



        const statusCode = insomnia.response.code;

        const contentType = insomnia.response.headers.find(header => header.key
        === 'Content-Type');	


        // check content type

        if(statusCode == 200 || statusCode == 201) {
        	insomnia.test("Response has correct content-type", () => {	
        			insomnia.expect(contentType.value).to.include("application/json");
        	});
        }


        // check has right key

        if(statusCode == 404 || statusCode == 409) {
        		const responseJSON = response.json();
        		insomnia.test("Response has a message key", () => {
        				insomnia.expect(responseJSON).to.have.property('message');
        		})
        }

      preRequest: |-
        // set base URL
        const apiHost = insomnia.variables.get('api-host');
        const port = insomnia.variables.get('port');
        const baseUrl = "http://" + apiHost + ":" + port;
        insomnia.environment.set("baseUrl", baseUrl);



        // check if we already have valid credentials stored
        const envAdminEmail = insomnia.environment.get("admin_email");
        const envUserEmail = insomnia.environment.get("user_email");

        // only create users if we don't have credentials yet
        if (!envAdminEmail || !envUserEmail) {
        		console.log("🔧 Setting up test users...");
        	
        		const admin = {
        			email: "test-admin@example.com",
        			passwordHash: "TestAdmin123!",
        			firstName: "TestAdminFirstName",
        			lastName: "TestAdminLastName",
        			role: "Admin"
        		}
        		
        		const user = {
        			email: "test-user@example.com",
        			passwordHash: "TestUser123!",
        			firstName: "TestUserFirstName",
        			lastName: "TestUserLastName",
        			role: "User"
        		}
        	
        		// create admin
        		const adminReq = {
        				url: `${baseUrl}/api/users`,
        				method: 'POST',
        				header: {
        						'Content-Type': 'application/json',
        				},
        				body: {
        						mode: 'raw',
        						raw: JSON.stringify(admin),
        				},
        		};
        		const adminResp = await new Promise((resolve, reject) => {
        				insomnia.sendRequest(
        						adminReq,
        						(err, resp) => {
        								if (err != null) {
        										reject(err);
        								} else {
        										resolve(resp);
        								}
        						}
        				);
        		});
        	
        		// create user
        		const userReq = {
        				url: `${baseUrl}/api/users`,
        				method: 'POST',
        				header: {
        						'Content-Type': 'application/json',
        				},
        				body: {
        						mode: 'raw',
        						raw: JSON.stringify(user),
        				},
        		};
        		const userResp = await new Promise((resolve, reject) => {
        				insomnia.sendRequest(
        						userReq,
        						(err, resp) => {
        								if (err != null) {
        										reject(err);
        								} else {
        										resolve(resp);
        								}
        						}
        				);
        		});
        	
        		// set environment variables
        		insomnia.environment.set("admin_email", admin.email);
            insomnia.environment.set("admin_password", admin.passwordHash);
            insomnia.environment.set("user_email", user.email);
            insomnia.environment.set("user_password", user.passwordHash);
            
            console.log("✓ Test user credentials prepared");
        } else {
            // credentials already exist, skip setup
            console.log("✓ Test users already configured");
        }
    authentication:
      type: basic
      useISO88591: false
      disabled: true
      username: ch@gmail.com
      password: "1234"
cookieJar:
  name: Default Jar
  meta:
    id: jar_c2e3daa93c764461bb82240bd7595a65
    created: 1749044569059
    modified: 1749185768968
environments:
  name: moon-robot-testing-environment
  meta:
    id: env_66b143806faa4b7eba213dd84bc271a3
    created: 1749044569058
    modified: 1749185768969
    isPrivate: false
  data:
    baseUrl: http://localhost:5152
